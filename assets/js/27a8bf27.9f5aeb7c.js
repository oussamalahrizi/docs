"use strict";(self.webpackChunkjava_learn=self.webpackChunkjava_learn||[]).push([[412],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var o=r(6540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},9369:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"django-vs-springboot/project-structure","title":"Project Structure Comparison","description":"This section compares Django and Spring Boot project organization, helping you understand how to structure your Spring Boot application based on your Django experience.","source":"@site/docs/django-vs-springboot/project-structure.md","sourceDirName":"django-vs-springboot","slug":"/django-vs-springboot/project-structure","permalink":"/docs/django-vs-springboot/project-structure","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"DjangoVsSpringBoot","previous":{"title":"Models and ORM Comparison","permalink":"/docs/django-vs-springboot/models-orm"},"next":{"title":"routing-controllers","permalink":"/docs/django-vs-springboot/routing-controllers"}}');var i=r(4848),s=r(8453);const a={},t="Project Structure Comparison",l={},c=[{value:"Django Project Structure",id:"django-project-structure",level:2},{value:"Typical Django Project Layout",id:"typical-django-project-layout",level:3},{value:"Spring Boot Project Structure",id:"spring-boot-project-structure",level:2},{value:"Equivalent Spring Boot Layout",id:"equivalent-spring-boot-layout",level:3},{value:"Key Structural Differences",id:"key-structural-differences",level:2},{value:"Package Organization vs App Organization",id:"package-organization-vs-app-organization",level:3},{value:"Django Apps",id:"django-apps",level:4},{value:"Spring Boot Modules",id:"spring-boot-modules",level:4},{value:"Layer Separation",id:"layer-separation",level:3},{value:"Django Approach",id:"django-approach",level:4},{value:"Spring Boot Approach",id:"spring-boot-approach",level:4},{value:"Configuration Files",id:"configuration-files",level:2},{value:"Django Configuration",id:"django-configuration",level:3},{value:"Spring Boot Configuration",id:"spring-boot-configuration",level:3},{value:"Migration Strategy",id:"migration-strategy",level:2},{value:"From Django Apps to Spring Boot Modules",id:"from-django-apps-to-spring-boot-modules",level:3},{value:"Example Migration",id:"example-migration",level:4},{value:"Build and Dependency Management",id:"build-and-dependency-management",level:2},{value:"Django",id:"django",level:3},{value:"Spring Boot (Maven)",id:"spring-boot-maven",level:3},{value:"Development Tools",id:"development-tools",level:2},{value:"Django Development",id:"django-development",level:3},{value:"Spring Boot Development",id:"spring-boot-development",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Django App Design",id:"django-app-design",level:3},{value:"Spring Boot Module Design",id:"spring-boot-module-design",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"project-structure-comparison",children:"Project Structure Comparison"})}),"\n",(0,i.jsx)(n.p,{children:"This section compares Django and Spring Boot project organization, helping you understand how to structure your Spring Boot application based on your Django experience."}),"\n",(0,i.jsx)(n.h2,{id:"django-project-structure",children:"Django Project Structure"}),"\n",(0,i.jsx)(n.h3,{id:"typical-django-project-layout",children:"Typical Django Project Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"myproject/\n\u251c\u2500\u2500 manage.py                    # Django CLI tool\n\u251c\u2500\u2500 requirements.txt             # Python dependencies\n\u251c\u2500\u2500 myproject/                   # Main project package\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py             # Configuration\n\u2502   \u251c\u2500\u2500 urls.py                 # Main URL routing\n\u2502   \u251c\u2500\u2500 wsgi.py                 # WSGI server config\n\u2502   \u2514\u2500\u2500 asgi.py                 # ASGI server config\n\u251c\u2500\u2500 users/                      # User management app\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 models.py               # Data models\n\u2502   \u251c\u2500\u2500 views.py                # Business logic/views\n\u2502   \u251c\u2500\u2500 urls.py                 # App-specific URLs\n\u2502   \u251c\u2500\u2500 serializers.py          # DRF serializers\n\u2502   \u251c\u2500\u2500 admin.py                # Admin interface\n\u2502   \u251c\u2500\u2500 apps.py                 # App configuration\n\u2502   \u2514\u2500\u2500 migrations/             # Database migrations\n\u251c\u2500\u2500 blog/                       # Blog app\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 migrations/\n\u251c\u2500\u2500 static/                     # Static files\n\u251c\u2500\u2500 media/                      # User uploads\n\u2514\u2500\u2500 templates/                  # HTML templates\n"})}),"\n",(0,i.jsx)(n.h2,{id:"spring-boot-project-structure",children:"Spring Boot Project Structure"}),"\n",(0,i.jsx)(n.h3,{id:"equivalent-spring-boot-layout",children:"Equivalent Spring Boot Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"myproject/\n\u251c\u2500\u2500 pom.xml                     # Maven dependencies (or build.gradle)\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/company/myproject/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 MyProjectApplication.java    # Main application class\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 config/                      # Configuration classes\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 DatabaseConfig.java\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 SecurityConfig.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 WebConfig.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 user/                        # User module\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 model/\n\u2502   \u2502   \u2502       \u2502   \u2502   \u2514\u2500\u2500 User.java           # Entity (Django model)\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u2502       \u2502   \u2502   \u2514\u2500\u2500 UserRepository.java # Data access\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 service/\n\u2502   \u2502   \u2502       \u2502   \u2502   \u251c\u2500\u2500 UserService.java    # Business logic\n\u2502   \u2502   \u2502       \u2502   \u2502   \u2514\u2500\u2500 impl/\n\u2502   \u2502   \u2502       \u2502   \u2502       \u2514\u2500\u2500 UserServiceImpl.java\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u2502       \u2502   \u2502   \u2514\u2500\u2500 UserController.java # REST endpoints\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 dto/\n\u2502   \u2502   \u2502       \u2502       \u251c\u2500\u2500 UserDTO.java        # Data transfer objects\n\u2502   \u2502   \u2502       \u2502       \u2514\u2500\u2500 CreateUserRequest.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 blog/                        # Blog module\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 model/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 service/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 dto/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 common/                      # Shared components\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 exception/\n\u2502   \u2502   \u2502       \u2502   \u2502   \u251c\u2500\u2500 GlobalExceptionHandler.java\n\u2502   \u2502   \u2502       \u2502   \u2502   \u2514\u2500\u2500 CustomExceptions.java\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 util/\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 constant/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 security/                    # Security components\n\u2502   \u2502   \u2502           \u251c\u2500\u2500 JwtAuthenticationFilter.java\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 CustomUserDetailsService.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 application.yml                  # Configuration (Django settings.py)\n\u2502   \u2502       \u251c\u2500\u2500 application-dev.yml              # Development config\n\u2502   \u2502       \u251c\u2500\u2500 application-prod.yml             # Production config\n\u2502   \u2502       \u251c\u2500\u2500 static/                          # Static web resources\n\u2502   \u2502       \u251c\u2500\u2500 templates/                       # Thymeleaf templates (if used)\n\u2502   \u2502       \u2514\u2500\u2500 db/migration/                    # Flyway migrations\n\u2502   \u2502           \u251c\u2500\u2500 V1__Create_user_table.sql\n\u2502   \u2502           \u2514\u2500\u2500 V2__Create_blog_table.sql\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/company/myproject/\n\u2502               \u251c\u2500\u2500 user/\n\u2502               \u2502   \u251c\u2500\u2500 UserServiceTest.java\n\u2502               \u2502   \u2514\u2500\u2500 UserControllerTest.java\n\u2502               \u2514\u2500\u2500 integration/\n\u2502                   \u2514\u2500\u2500 UserIntegrationTest.java\n\u251c\u2500\u2500 target/                     # Build output (Maven)\n\u2514\u2500\u2500 docker/                     # Docker configuration\n    \u251c\u2500\u2500 Dockerfile\n    \u2514\u2500\u2500 docker-compose.yml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-structural-differences",children:"Key Structural Differences"}),"\n",(0,i.jsx)(n.h3,{id:"package-organization-vs-app-organization",children:"Package Organization vs App Organization"}),"\n",(0,i.jsx)(n.h4,{id:"django-apps",children:"Django Apps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Logical grouping of related functionality"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structure"}),": Each app is a Python package with predefined files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Registration"}),": Apps must be registered in ",(0,i.jsx)(n.code,{children:"INSTALLED_APPS"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Django app structure\nusers/\n\u251c\u2500\u2500 models.py       # All user-related models\n\u251c\u2500\u2500 views.py        # All user-related views\n\u251c\u2500\u2500 urls.py         # URL routing for this app\n\u2514\u2500\u2500 serializers.py  # API serializers\n"})}),"\n",(0,i.jsx)(n.h4,{id:"spring-boot-modules",children:"Spring Boot Modules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Package-based organization following domain-driven design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structure"}),": Java packages with layer-based organization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Registration"}),": Automatic component scanning"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Spring Boot module structure\nuser/\n\u251c\u2500\u2500 model/          # Entities (similar to Django models)\n\u251c\u2500\u2500 repository/     # Data access layer\n\u251c\u2500\u2500 service/        # Business logic layer\n\u251c\u2500\u2500 controller/     # Web/API layer\n\u2514\u2500\u2500 dto/           # Data transfer objects\n"})}),"\n",(0,i.jsx)(n.h3,{id:"layer-separation",children:"Layer Separation"}),"\n",(0,i.jsx)(n.h4,{id:"django-approach",children:"Django Approach"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# models.py - Data models\nclass User(models.Model):\n    username = models.CharField(max_length=150)\n    email = models.EmailField()\n\n# views.py - Business logic and web layer\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n# serializers.py - Data serialization\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n"})}),"\n",(0,i.jsx)(n.h4,{id:"spring-boot-approach",children:"Spring Boot Approach"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// model/User.java - Entity\n@Entity\npublic class User {\n    @Id\n    private Long id;\n    private String username;\n    private String email;\n}\n\n// repository/UserRepository.java - Data access\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findByEmail(String email);\n}\n\n// service/UserService.java - Business logic\n@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n    \n    public User createUser(CreateUserRequest request) {\n        // Business logic here\n    }\n}\n\n// controller/UserController.java - Web layer\n@RestController\n@RequestMapping("/api/users")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n    \n    @PostMapping\n    public ResponseEntity<UserDTO> createUser(@RequestBody CreateUserRequest request) {\n        // Controller logic here\n    }\n}\n\n// dto/UserDTO.java - Data transfer\npublic class UserDTO {\n    private Long id;\n    private String username;\n    private String email;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,i.jsx)(n.h3,{id:"django-configuration",children:"Django Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# settings.py\nDEBUG = True\nSECRET_KEY = 'your-secret-key'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'myproject',\n        'USER': 'user',\n        'PASSWORD': 'password',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'rest_framework',\n    'users',\n    'blog',\n]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-configuration",children:"Spring Boot Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# application.yml\nspring:\n  application:\n    name: myproject\n  \n  datasource:\n    url: jdbc:postgresql://localhost:5432/myproject\n    username: user\n    password: password\n    driver-class-name: org.postgresql.Driver\n  \n  jpa:\n    hibernate:\n      ddl-auto: validate\n    show-sql: false\n\nserver:\n  port: 8080\n\nlogging:\n  level:\n    com.company.myproject: DEBUG\n"})}),"\n",(0,i.jsx)(n.h2,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"from-django-apps-to-spring-boot-modules",children:"From Django Apps to Spring Boot Modules"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identify Django Apps"}),": List all your Django apps"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Map to Domains"}),": Group related apps into business domains"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create Package Structure"}),": Create Java packages for each domain"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement Layers"}),": Separate concerns into model, repository, service, controller"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"example-migration",children:"Example Migration"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Django Structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"users/\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 views.py\n\u2514\u2500\u2500 serializers.py\n\nprofiles/\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 views.py\n\u2514\u2500\u2500 serializers.py\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Spring Boot Structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"user/  # Combined users + profiles\n\u251c\u2500\u2500 model/\n\u2502   \u251c\u2500\u2500 User.java\n\u2502   \u2514\u2500\u2500 UserProfile.java\n\u251c\u2500\u2500 repository/\n\u251c\u2500\u2500 service/\n\u251c\u2500\u2500 controller/\n\u2514\u2500\u2500 dto/\n"})}),"\n",(0,i.jsx)(n.h2,{id:"build-and-dependency-management",children:"Build and Dependency Management"}),"\n",(0,i.jsx)(n.h3,{id:"django",children:"Django"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# requirements.txt\nDjango==4.2.0\ndjangorestframework==3.14.0\npsycopg2-binary==2.9.5\ncelery==5.2.0\n"})}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-maven",children:"Spring Boot (Maven)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"\x3c!-- pom.xml --\x3e\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.postgresql</groupId>\n        <artifactId>postgresql</artifactId>\n    </dependency>\n</dependencies>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"development-tools",children:"Development Tools"}),"\n",(0,i.jsx)(n.h3,{id:"django-development",children:"Django Development"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Django management commands\npython manage.py runserver\npython manage.py makemigrations\npython manage.py migrate\npython manage.py createsuperuser\npython manage.py shell\n"})}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-development",children:"Spring Boot Development"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Maven commands\nmvn spring-boot:run\nmvn clean install\nmvn test\n\n# Gradle commands (alternative)\n./gradlew bootRun\n./gradlew build\n./gradlew test\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"django-app-design",children:"Django App Design"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep apps focused and cohesive"}),"\n",(0,i.jsx)(n.li,{children:"Avoid circular dependencies between apps"}),"\n",(0,i.jsx)(n.li,{children:"Use clear, descriptive app names"}),"\n",(0,i.jsx)(n.li,{children:"Separate concerns within each app"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-module-design",children:"Spring Boot Module Design"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Follow domain-driven design principles"}),"\n",(0,i.jsx)(n.li,{children:"Use clear package naming conventions"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper layer separation"}),"\n",(0,i.jsx)(n.li,{children:"Leverage dependency injection for loose coupling"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Django"}),(0,i.jsx)(n.th,{children:"Spring Boot"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Organization"})}),(0,i.jsx)(n.td,{children:"App-based"}),(0,i.jsx)(n.td,{children:"Package-based"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Configuration"})}),(0,i.jsx)(n.td,{children:"Python settings"}),(0,i.jsx)(n.td,{children:"YAML/Properties + Java config"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Dependencies"})}),(0,i.jsx)(n.td,{children:"requirements.txt"}),(0,i.jsx)(n.td,{children:"pom.xml/build.gradle"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Entry Point"})}),(0,i.jsx)(n.td,{children:"manage.py"}),(0,i.jsx)(n.td,{children:"Application.java"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Layer Separation"})}),(0,i.jsx)(n.td,{children:"File-based"}),(0,i.jsx)(n.td,{children:"Package-based"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Auto-discovery"})}),(0,i.jsx)(n.td,{children:"INSTALLED_APPS"}),(0,i.jsx)(n.td,{children:"Component scanning"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The key transition is moving from Django's file-based organization to Spring Boot's package and layer-based organization, while maintaining the same logical separation of concerns."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);