"use strict";(self.webpackChunkjava_learn=self.webpackChunkjava_learn||[]).push([[660],{3709:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"django-vs-springboot/configuration","title":"Configuration Management","description":"This section covers how Django settings translate to Spring Boot configuration, including environment management, external configuration, and best practices.","source":"@site/docs/django-vs-springboot/configuration.md","sourceDirName":"django-vs-springboot","slug":"/django-vs-springboot/configuration","permalink":"/docs/django-vs-springboot/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"DjangoVsSpringBoot","previous":{"title":"common-pitfalls","permalink":"/docs/django-vs-springboot/common-pitfalls"},"next":{"title":"database-migrations","permalink":"/docs/django-vs-springboot/database-migrations"}}');var r=i(4848),o=i(8453);const t={},s="Configuration Management",l={},c=[{value:"Django Settings Overview",id:"django-settings-overview",level:2},{value:"Basic Django Settings Structure",id:"basic-django-settings-structure",level:3},{value:"Spring Boot Configuration Equivalent",id:"spring-boot-configuration-equivalent",level:2},{value:"application.yml (Main Configuration)",id:"applicationyml-main-configuration",level:3},{value:"Environment-Specific Configuration",id:"environment-specific-configuration",level:3},{value:"Development Configuration",id:"development-configuration",level:4},{value:"Production Configuration",id:"production-configuration",level:4},{value:"Test Configuration",id:"test-configuration",level:4},{value:"Java Configuration Classes",id:"java-configuration-classes",level:2},{value:"Main Configuration Class",id:"main-configuration-class",level:3},{value:"Database Configuration",id:"database-configuration",level:3},{value:"CORS Configuration",id:"cors-configuration",level:3},{value:"Configuration Properties Classes",id:"configuration-properties-classes",level:2},{value:"Application Properties",id:"application-properties",level:3},{value:"Security Properties",id:"security-properties",level:3},{value:"Environment Variables and Profiles",id:"environment-variables-and-profiles",level:2},{value:"Docker Environment",id:"docker-environment",level:3},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Configuration Validation",id:"configuration-validation",level:2},{value:"Custom Configuration Validator",id:"custom-configuration-validator",level:3},{value:"Migration Strategy",id:"migration-strategy",level:2},{value:"From Django Settings to Spring Boot Configuration",id:"from-django-settings-to-spring-boot-configuration",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Django Settings Best Practices",id:"django-settings-best-practices",level:4},{value:"Spring Boot Configuration Best Practices",id:"spring-boot-configuration-best-practices",level:4},{value:"Summary",id:"summary",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"configuration-management",children:"Configuration Management"})}),"\n",(0,r.jsx)(e.p,{children:"This section covers how Django settings translate to Spring Boot configuration, including environment management, external configuration, and best practices."}),"\n",(0,r.jsx)(e.h2,{id:"django-settings-overview",children:"Django Settings Overview"}),"\n",(0,r.jsx)(e.h3,{id:"basic-django-settings-structure",children:"Basic Django Settings Structure"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# settings.py\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-default-key')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'\n\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')\n\n# Database configuration\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DB_NAME', 'myproject'),\n        'USER': os.environ.get('DB_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DB_PASSWORD', 'password'),\n        'HOST': os.environ.get('DB_HOST', 'localhost'),\n        'PORT': os.environ.get('DB_PORT', '5432'),\n    }\n}\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'corsheaders',\n    'users',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# REST Framework configuration\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20,\n}\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Celery configuration\nCELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')\nCELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')\n\n# Cache configuration\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.redis.RedisCache',\n        'LOCATION': os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/1'),\n    }\n}\n\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n\n# Logging configuration\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',\n            'style': '{',\n        },\n    },\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': 'django.log',\n            'formatter': 'verbose',\n        },\n        'console': {\n            'level': 'DEBUG',\n            'class': 'logging.StreamHandler',\n            'formatter': 'verbose',\n        },\n    },\n    'root': {\n        'handlers': ['console', 'file'],\n        'level': 'INFO',\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console', 'file'],\n            'level': 'INFO',\n            'propagate': False,\n        },\n    },\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"spring-boot-configuration-equivalent",children:"Spring Boot Configuration Equivalent"}),"\n",(0,r.jsx)(e.h3,{id:"applicationyml-main-configuration",children:"application.yml (Main Configuration)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# application.yml\nspring:\n  application:\n    name: myproject\n  \n  profiles:\n    active: ${SPRING_PROFILES_ACTIVE:dev}\n  \n  datasource:\n    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:myproject}\n    username: ${DB_USER:postgres}\n    password: ${DB_PASSWORD:password}\n    driver-class-name: org.postgresql.Driver\n    hikari:\n      maximum-pool-size: 20\n      minimum-idle: 5\n      connection-timeout: 30000\n      idle-timeout: 600000\n      max-lifetime: 1800000\n  \n  jpa:\n    hibernate:\n      ddl-auto: ${DDL_AUTO:validate}\n    show-sql: ${SHOW_SQL:false}\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.PostgreSQLDialect\n        format_sql: true\n        use_sql_comments: true\n  \n  data:\n    redis:\n      host: ${REDIS_HOST:localhost}\n      port: ${REDIS_PORT:6379}\n      password: ${REDIS_PASSWORD:}\n      database: ${REDIS_DB:0}\n      timeout: 2000ms\n      lettuce:\n        pool:\n          max-active: 8\n          max-idle: 8\n          min-idle: 0\n  \n  cache:\n    type: redis\n    redis:\n      time-to-live: 600000\n  \n  mail:\n    host: ${EMAIL_HOST:smtp.gmail.com}\n    port: ${EMAIL_PORT:587}\n    username: ${EMAIL_HOST_USER}\n    password: ${EMAIL_HOST_PASSWORD}\n    properties:\n      mail:\n        smtp:\n          auth: true\n          starttls:\n            enable: true\n  \n  servlet:\n    multipart:\n      max-file-size: 10MB\n      max-request-size: 10MB\n\nserver:\n  port: ${SERVER_PORT:8080}\n  servlet:\n    context-path: ${CONTEXT_PATH:}\n  error:\n    include-message: always\n    include-binding-errors: always\n\n# Security configuration\nsecurity:\n  jwt:\n    secret: ${JWT_SECRET:mySecretKey}\n    expiration: ${JWT_EXPIRATION:86400} # 24 hours in seconds\n\n# Application-specific configuration\napp:\n  cors:\n    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}\n    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}\n    allowed-headers: ${CORS_ALLOWED_HEADERS:*}\n  \n  pagination:\n    default-page-size: ${DEFAULT_PAGE_SIZE:20}\n    max-page-size: ${MAX_PAGE_SIZE:100}\n  \n  file-upload:\n    max-size: ${MAX_FILE_SIZE:10MB}\n    allowed-types: ${ALLOWED_FILE_TYPES:jpg,jpeg,png,pdf,doc,docx}\n    upload-dir: ${UPLOAD_DIR:./uploads}\n\n# Logging configuration\nlogging:\n  level:\n    com.company.myproject: ${LOG_LEVEL:DEBUG}\n    org.springframework.security: ${SECURITY_LOG_LEVEL:DEBUG}\n    org.springframework.web: ${WEB_LOG_LEVEL:INFO}\n    org.hibernate.SQL: ${SQL_LOG_LEVEL:DEBUG}\n    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_PARAM_LOG_LEVEL:TRACE}\n  \n  pattern:\n    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"\n    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"\n  \n  file:\n    name: ${LOG_FILE:./logs/application.log}\n    max-size: 10MB\n    max-history: 30\n\n# Management endpoints\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: health,info,metrics,prometheus\n  endpoint:\n    health:\n      show-details: when-authorized\n  \n  info:\n    env:\n      enabled: true\n'})}),"\n",(0,r.jsx)(e.h3,{id:"environment-specific-configuration",children:"Environment-Specific Configuration"}),"\n",(0,r.jsx)(e.h4,{id:"development-configuration",children:"Development Configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# application-dev.yml\nspring:\n  jpa:\n    hibernate:\n      ddl-auto: update\n    show-sql: true\n  \n  h2:\n    console:\n      enabled: true\n\nserver:\n  port: 8080\n\nlogging:\n  level:\n    com.company.myproject: DEBUG\n    org.springframework.web: DEBUG\n    org.hibernate.SQL: DEBUG\n\napp:\n  cors:\n    allowed-origins: "http://localhost:3000,http://localhost:8080"\n'})}),"\n",(0,r.jsx)(e.h4,{id:"production-configuration",children:"Production Configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# application-prod.yml\nspring:\n  jpa:\n    hibernate:\n      ddl-auto: validate\n    show-sql: false\n\nserver:\n  port: 8080\n\nlogging:\n  level:\n    com.company.myproject: INFO\n    org.springframework.web: WARN\n    org.hibernate.SQL: WARN\n  \n  file:\n    name: /var/log/myproject/application.log\n\napp:\n  cors:\n    allowed-origins: "https://myapp.com,https://www.myapp.com"\n'})}),"\n",(0,r.jsx)(e.h4,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# application-test.yml\nspring:\n  datasource:\n    url: jdbc:h2:mem:testdb\n    driver-class-name: org.h2.Driver\n    username: sa\n    password: password\n  \n  jpa:\n    hibernate:\n      ddl-auto: create-drop\n    show-sql: true\n  \n  h2:\n    console:\n      enabled: true\n\nlogging:\n  level:\n    com.company.myproject: DEBUG\n"})}),"\n",(0,r.jsx)(e.h2,{id:"java-configuration-classes",children:"Java Configuration Classes"}),"\n",(0,r.jsx)(e.h3,{id:"main-configuration-class",children:"Main Configuration Class"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@Configuration\n@EnableConfigurationProperties({AppProperties.class, SecurityProperties.class})\n@EnableCaching\n@EnableAsync\npublic class ApplicationConfig {\n    \n    @Bean\n    public ModelMapper modelMapper() {\n        ModelMapper mapper = new ModelMapper();\n        mapper.getConfiguration()\n                .setMatchingStrategy(MatchingStrategies.STRICT)\n                .setFieldMatchingEnabled(true)\n                .setFieldAccessLevel(org.modelmapper.config.Configuration.AccessLevel.PRIVATE);\n        return mapper;\n    }\n    \n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n    \n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n    \n    @Bean\n    @Primary\n    public ObjectMapper objectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.registerModule(new JavaTimeModule());\n        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        return mapper;\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"database-configuration",children:"Database Configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@Configuration\n@EnableJpaRepositories(basePackages = "com.company.myproject.*.repository")\n@EnableTransactionManagement\npublic class DatabaseConfig {\n    \n    @Bean\n    @ConfigurationProperties("spring.datasource")\n    public DataSource dataSource() {\n        return DataSourceBuilder.create().build();\n    }\n    \n    @Bean\n    public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {\n        JpaTransactionManager transactionManager = new JpaTransactionManager();\n        transactionManager.setEntityManagerFactory(entityManagerFactory);\n        return transactionManager;\n    }\n    \n    @Bean\n    public JpaVendorAdapter jpaVendorAdapter() {\n        HibernateJpaVendorAdapter hibernateJpaVendorAdapter = new HibernateJpaVendorAdapter();\n        hibernateJpaVendorAdapter.setShowSql(false);\n        hibernateJpaVendorAdapter.setGenerateDdl(true);\n        hibernateJpaVendorAdapter.setDatabase(Database.POSTGRESQL);\n        return hibernateJpaVendorAdapter;\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"cors-configuration",children:"CORS Configuration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@Configuration\n@EnableWebMvc\npublic class WebConfig implements WebMvcConfigurer {\n    \n    @Value("${app.cors.allowed-origins}")\n    private String[] allowedOrigins;\n    \n    @Value("${app.cors.allowed-methods}")\n    private String[] allowedMethods;\n    \n    @Value("${app.cors.allowed-headers}")\n    private String[] allowedHeaders;\n    \n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping("/api/**")\n                .allowedOrigins(allowedOrigins)\n                .allowedMethods(allowedMethods)\n                .allowedHeaders(allowedHeaders)\n                .allowCredentials(true);\n    }\n    \n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler("/uploads/**")\n                .addResourceLocations("file:./uploads/");\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"configuration-properties-classes",children:"Configuration Properties Classes"}),"\n",(0,r.jsx)(e.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@ConfigurationProperties(prefix = "app")\n@Data\n@Component\npublic class AppProperties {\n    \n    private Cors cors = new Cors();\n    private Pagination pagination = new Pagination();\n    private FileUpload fileUpload = new FileUpload();\n    \n    @Data\n    public static class Cors {\n        private String[] allowedOrigins;\n        private String[] allowedMethods;\n        private String[] allowedHeaders;\n    }\n    \n    @Data\n    public static class Pagination {\n        private int defaultPageSize = 20;\n        private int maxPageSize = 100;\n    }\n    \n    @Data\n    public static class FileUpload {\n        private String maxSize = "10MB";\n        private String[] allowedTypes;\n        private String uploadDir = "./uploads";\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"security-properties",children:"Security Properties"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@ConfigurationProperties(prefix = "security")\n@Data\n@Component\npublic class SecurityProperties {\n    \n    private Jwt jwt = new Jwt();\n    \n    @Data\n    public static class Jwt {\n        private String secret;\n        private long expiration = 86400; // 24 hours\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"environment-variables-and-profiles",children:"Environment Variables and Profiles"}),"\n",(0,r.jsx)(e.h3,{id:"docker-environment",children:"Docker Environment"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'# Dockerfile\nFROM openjdk:17-jdk-slim\n\nENV SPRING_PROFILES_ACTIVE=prod\nENV DB_HOST=postgres\nENV DB_NAME=myproject\nENV DB_USER=postgres\nENV DB_PASSWORD=password\nENV REDIS_HOST=redis\n\nCOPY target/myproject-*.jar app.jar\nENTRYPOINT ["java", "-jar", "/app.jar"]\n'})}),"\n",(0,r.jsx)(e.h3,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# docker-compose.yml\nversion: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"8080:8080\"\n    environment:\n      SPRING_PROFILES_ACTIVE: prod\n      DB_HOST: postgres\n      DB_NAME: myproject\n      DB_USER: postgres\n      DB_PASSWORD: password\n      REDIS_HOST: redis\n      JWT_SECRET: mySecretProductionKey\n    depends_on:\n      - postgres\n      - redis\n  \n  postgres:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myproject\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n  \n  redis:\n    image: redis:6-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n"})}),"\n",(0,r.jsx)(e.h2,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,r.jsx)(e.h3,{id:"custom-configuration-validator",children:"Custom Configuration Validator"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@Component\n@ConfigurationPropertiesBinding\npublic class ConfigurationValidator implements Validator {\n    \n    @Override\n    public boolean supports(Class<?> clazz) {\n        return AppProperties.class.equals(clazz);\n    }\n    \n    @Override\n    public void validate(Object target, Errors errors) {\n        AppProperties properties = (AppProperties) target;\n        \n        if (properties.getPagination().getDefaultPageSize() <= 0) {\n            errors.rejectValue("pagination.defaultPageSize", \n                "invalid.pagination.defaultPageSize", \n                "Default page size must be positive");\n        }\n        \n        if (properties.getPagination().getMaxPageSize() < properties.getPagination().getDefaultPageSize()) {\n            errors.rejectValue("pagination.maxPageSize", \n                "invalid.pagination.maxPageSize", \n                "Max page size must be greater than default page size");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,r.jsx)(e.h3,{id:"from-django-settings-to-spring-boot-configuration",children:"From Django Settings to Spring Boot Configuration"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Identify Configuration Categories"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Database settings \u2192 ",(0,r.jsx)(e.code,{children:"spring.datasource"})]}),"\n",(0,r.jsxs)(e.li,{children:["Debug/logging \u2192 ",(0,r.jsx)(e.code,{children:"logging"})," configuration"]}),"\n",(0,r.jsxs)(e.li,{children:["Static files \u2192 ",(0,r.jsx)(e.code,{children:"spring.web.resources"})]}),"\n",(0,r.jsx)(e.li,{children:"Middleware \u2192 Filters/Interceptors configuration"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Environment Variable Mapping"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"# Django\nDEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# Spring Boot\nlogging:\n  level:\n    com.company.myproject: ${LOG_LEVEL:INFO}\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Configuration Organization"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Move environment-specific settings to profile-specific YAML files"}),"\n",(0,r.jsxs)(e.li,{children:["Create ",(0,r.jsx)(e.code,{children:"@ConfigurationProperties"})," classes for complex configurations"]}),"\n",(0,r.jsxs)(e.li,{children:["Use ",(0,r.jsx)(e.code,{children:"@Value"})," annotations for simple property injection"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(e.h4,{id:"django-settings-best-practices",children:"Django Settings Best Practices"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use environment variables for sensitive data"}),"\n",(0,r.jsx)(e.li,{children:"Separate settings by environment (dev, staging, prod)"}),"\n",(0,r.jsx)(e.li,{children:"Keep settings files in version control (except secrets)"}),"\n",(0,r.jsx)(e.li,{children:"Use django-environ for better environment variable handling"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"spring-boot-configuration-best-practices",children:"Spring Boot Configuration Best Practices"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use YAML for hierarchical configuration"}),"\n",(0,r.jsx)(e.li,{children:"Leverage Spring profiles for environment-specific configs"}),"\n",(0,r.jsx)(e.li,{children:"Create typed configuration properties classes"}),"\n",(0,r.jsxs)(e.li,{children:["Use ",(0,r.jsx)(e.code,{children:"@ConfigurationProperties"})," for complex configurations"]}),"\n",(0,r.jsx)(e.li,{children:"Validate configuration properties at startup"}),"\n",(0,r.jsx)(e.li,{children:"Document configuration options clearly"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-Markdown",children:"| Aspect | Django | Spring Boot |\n|--------|--------|-------------|\n| **Main Config** | settings.py | application.yml |\n| **Environment Vars** | os.environ.get() | ${VAR:default} |\n| **Environment-specific** | Multiple settings files | Profile-specific YAML |\n| **Validation** | Manual | @ConfigurationProperties validation |\n| **Type Safety** | Limited | Strong typing with classes |\n| **Auto-completion** | Limited | Full IDE support |\n| **Documentation** | Comments | @ConfigurationProperties metadata |\n"})}),"\n",(0,r.jsx)(e.p,{children:"Spring Boot provides more structured, type-safe configuration management compared to Django's Python-based approach, with better IDE integration and validation capabilities."})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>s});var a=i(6540);const r={},o=a.createContext(r);function t(n){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);