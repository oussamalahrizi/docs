"use strict";(self.webpackChunkjava_learn=self.webpackChunkjava_learn||[]).push([[646],{1020:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"java-springboot/app-properties","title":"Complete Guide to Spring Boot Application Properties","description":"Author: Generated for oussamalahrizi","source":"@site/docs/java-springboot/app-properties.md","sourceDirName":"java-springboot","slug":"/java-springboot/app-properties","permalink":"/docs/java-springboot/app-properties","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"javaSpring","next":{"title":"\ud83d\udcd8 Java + Spring Boot Journey: Terminal-First Dev Setup","permalink":"/docs/java-springboot/chatgpt-ep1"}}');var s=r(4848),t=r(8453);const o={},l="Complete Guide to Spring Boot Application Properties",a={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Benefits:",id:"key-benefits",level:3},{value:"Property File Formats",id:"property-file-formats",level:2},{value:"application.properties",id:"applicationproperties",level:3},{value:"application.yml (Recommended)",id:"applicationyml-recommended",level:3},{value:"Complete YAML Configuration",id:"complete-yaml-configuration",level:2},{value:"Environment Variables &amp; Docker",id:"environment-variables--docker",level:2},{value:".env File Structure",id:"env-file-structure",level:3},{value:"Docker Compose Configuration",id:"docker-compose-configuration",level:3},{value:"Dockerfile Example",id:"dockerfile-example",level:3},{value:"Property Categories Explained",id:"property-categories-explained",level:2},{value:"Server Configuration",id:"server-configuration",level:3},{value:"Database Properties",id:"database-properties",level:3},{value:"Redis Properties",id:"redis-properties",level:3},{value:"Security Properties",id:"security-properties",level:3},{value:"Logging Properties",id:"logging-properties",level:3},{value:"Docker Setup with Environment Files",id:"docker-setup-with-environment-files",level:2},{value:"1. Development Setup",id:"1-development-setup",level:3},{value:"2. Production Setup",id:"2-production-setup",level:3},{value:"3. Using Docker Secrets (Recommended for Production)",id:"3-using-docker-secrets-recommended-for-production",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Environment Variables",id:"1-environment-variables",level:3},{value:"2. Property Organization",id:"2-property-organization",level:3},{value:"3. Security",id:"3-security",level:3},{value:"4. Performance",id:"4-performance",level:3},{value:"5. Deployment",id:"5-deployment",level:3}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"complete-guide-to-spring-boot-application-properties",children:"Complete Guide to Spring Boot Application Properties"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Author:"})," Generated for oussamalahrizi",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Date:"})," 2025-07-26",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Version:"})," 1.0"]}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#property-file-formats",children:"Property File Formats"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#complete-yaml-configuration",children:"Complete YAML Configuration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#environment-variables--docker",children:"Environment Variables & Docker"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#property-categories-explained",children:"Property Categories Explained"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#docker-setup-with-environment-files",children:"Docker Setup with Environment Files"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Spring Boot application properties allow you to externalize configuration, making your applications environment-agnostic and easily deployable across different environments (development, staging, production)."}),"\n",(0,s.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Externalized Configuration"}),": No need to rebuild for different environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment-Specific Settings"}),": Different configs for dev, test, prod"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Sensitive data kept out of source code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility"}),": Override properties via environment variables, command line, etc."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"property-file-formats",children:"Property File Formats"}),"\n",(0,s.jsx)(n.h3,{id:"applicationproperties",children:"application.properties"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# Server Configuration\nserver.port=8080\nserver.servlet.context-path=/api/v1\n\n# Database\nspring.datasource.url=jdbc:postgresql://localhost:5432/mydb\nspring.datasource.username=postgres\nspring.datasource.password=secret\n\n# Redis\nspring.redis.host=localhost\nspring.redis.port=6379\n"})}),"\n",(0,s.jsx)(n.h3,{id:"applicationyml-recommended",children:"application.yml (Recommended)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"server:\n  port: 8080\n  servlet:\n    context-path: /api/v1\n\nspring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/mydb\n    username: postgres\n    password: secret\n  redis:\n    host: localhost\n    port: 6379\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complete-yaml-configuration",children:"Complete YAML Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# =============================================================================\n# ENTERPRISE SPRING BOOT APPLICATION CONFIGURATION\n# =============================================================================\n\n# Application Metadata\napp:\n  name: ${APP_NAME:Enterprise API}\n  version: ${APP_VERSION:1.0.0}\n  description: "Production-ready Spring Boot API"\n\n# =============================================================================\n# SERVER CONFIGURATION\n# =============================================================================\nserver:\n  port: ${SERVER_PORT:8080}\n  servlet:\n    context-path: ${CONTEXT_PATH:/api/v1}\n  compression:\n    enabled: true\n    mime-types: text/html,text/xml,text/plain,text/css,application/json\n  tomcat:\n    max-threads: ${TOMCAT_MAX_THREADS:200}\n    min-spare-threads: ${TOMCAT_MIN_THREADS:20}\n    connection-timeout: ${TOMCAT_CONNECTION_TIMEOUT:20000}\n\n# =============================================================================\n# SPRING FRAMEWORK CONFIGURATION\n# =============================================================================\nspring:\n  application:\n    name: ${SPRING_APP_NAME:enterprise-api}\n  \n  profiles:\n    active: ${SPRING_PROFILES_ACTIVE:development}\n\n  # =============================================================================\n  # DATABASE CONFIGURATION\n  # =============================================================================\n  datasource:\n    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/enterprise}\n    username: ${DB_USERNAME:postgres}\n    password: ${DB_PASSWORD:password}\n    driver-class-name: ${DB_DRIVER:org.postgresql.Driver}\n    \n    # HikariCP Connection Pool\n    hikari:\n      maximum-pool-size: ${DB_POOL_MAX:20}\n      minimum-idle: ${DB_POOL_MIN:5}\n      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}\n      idle-timeout: ${DB_IDLE_TIMEOUT:600000}\n      max-lifetime: ${DB_MAX_LIFETIME:1800000}\n      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}\n\n  # JPA/Hibernate Configuration\n  jpa:\n    hibernate:\n      ddl-auto: ${JPA_DDL_AUTO:validate}\n    show-sql: ${JPA_SHOW_SQL:false}\n    properties:\n      hibernate:\n        dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}\n        format_sql: ${HIBERNATE_FORMAT_SQL:true}\n        jdbc:\n          batch_size: ${HIBERNATE_BATCH_SIZE:20}\n\n  # =============================================================================\n  # REDIS CONFIGURATION\n  # =============================================================================\n  redis:\n    host: ${REDIS_HOST:localhost}\n    port: ${REDIS_PORT:6379}\n    password: ${REDIS_PASSWORD:}\n    database: ${REDIS_DATABASE:0}\n    timeout: ${REDIS_TIMEOUT:2000ms}\n    lettuce:\n      pool:\n        max-active: ${REDIS_POOL_MAX_ACTIVE:10}\n        max-idle: ${REDIS_POOL_MAX_IDLE:10}\n        min-idle: ${REDIS_POOL_MIN_IDLE:1}\n\n  # =============================================================================\n  # JACKSON JSON CONFIGURATION\n  # =============================================================================\n  jackson:\n    serialization:\n      write-dates-as-timestamps: false\n      fail-on-empty-beans: false\n    deserialization:\n      fail-on-unknown-properties: false\n    default-property-inclusion: non_null\n\n  # =============================================================================\n  # MAIL CONFIGURATION\n  # =============================================================================\n  mail:\n    host: ${MAIL_HOST:smtp.gmail.com}\n    port: ${MAIL_PORT:587}\n    username: ${MAIL_USERNAME:}\n    password: ${MAIL_PASSWORD:}\n    properties:\n      mail:\n        smtp:\n          auth: ${MAIL_SMTP_AUTH:true}\n          starttls:\n            enable: ${MAIL_SMTP_STARTTLS:true}\n\n# =============================================================================\n# LOGGING CONFIGURATION\n# =============================================================================\nlogging:\n  level:\n    root: ${LOG_LEVEL_ROOT:INFO}\n    org.springframework.web: ${LOG_LEVEL_SPRING_WEB:INFO}\n    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}\n    org.hibernate.SQL: ${LOG_LEVEL_HIBERNATE_SQL:WARN}\n    com.enterprise.api: ${LOG_LEVEL_APP:INFO}\n  \n  pattern:\n    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"\n    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"\n  \n  file:\n    name: ${LOG_FILE_PATH:logs/application.log}\n    max-size: ${LOG_FILE_MAX_SIZE:10MB}\n    max-history: ${LOG_FILE_MAX_HISTORY:30}\n\n# =============================================================================\n# ACTUATOR & MONITORING\n# =============================================================================\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: ${ACTUATOR_ENDPOINTS:health,info,metrics}\n      base-path: ${ACTUATOR_BASE_PATH:/actuator}\n  \n  endpoint:\n    health:\n      show-details: ${ACTUATOR_HEALTH_DETAILS:when-authorized}\n  \n  metrics:\n    export:\n      prometheus:\n        enabled: ${PROMETHEUS_ENABLED:true}\n\n# =============================================================================\n# API DOCUMENTATION (OpenAPI/Swagger)\n# =============================================================================\nspringdoc:\n  api-docs:\n    path: ${API_DOCS_PATH:/api-docs}\n  swagger-ui:\n    path: ${SWAGGER_UI_PATH:/swagger-ui.html}\n    enabled: ${SWAGGER_ENABLED:true}\n\n# =============================================================================\n# SECURITY CONFIGURATION\n# =============================================================================\nsecurity:\n  jwt:\n    secret: ${JWT_SECRET:myVerySecretKey123!@#}\n    expiration: ${JWT_EXPIRATION:86400000}  # 24 hours\n    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}  # 7 days\n  \n  cors:\n    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}\n    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}\n    allowed-headers: ${CORS_ALLOWED_HEADERS:*}\n    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}\n    max-age: ${CORS_MAX_AGE:3600}\n\n# =============================================================================\n# RATE LIMITING\n# =============================================================================\nrate-limiting:\n  enabled: ${RATE_LIMITING_ENABLED:true}\n  requests-per-minute: ${RATE_LIMIT_REQUESTS:100}\n  burst-capacity: ${RATE_LIMIT_BURST:150}\n\n# =============================================================================\n# FILE UPLOAD CONFIGURATION\n# =============================================================================\nfile-upload:\n  max-file-size: ${MAX_FILE_SIZE:10MB}\n  max-request-size: ${MAX_REQUEST_SIZE:50MB}\n  upload-directory: ${UPLOAD_DIR:/tmp/uploads}\n  allowed-extensions: ${ALLOWED_FILE_EXTENSIONS:jpg,jpeg,png,pdf,docx}\n\n# =============================================================================\n# CACHE CONFIGURATION\n# =============================================================================\ncache:\n  redis:\n    time-to-live: ${CACHE_TTL:1800}  # 30 minutes\n    key-prefix: ${CACHE_KEY_PREFIX:enterprise-api}\n  \n  caffeine:\n    maximum-size: ${CAFFEINE_MAX_SIZE:1000}\n    expire-after-write: ${CAFFEINE_EXPIRE_WRITE:300s}\n\n# =============================================================================\n# EXTERNAL API CONFIGURATION\n# =============================================================================\nexternal-apis:\n  payment-service:\n    base-url: ${PAYMENT_SERVICE_URL:https://api.payment.com}\n    api-key: ${PAYMENT_API_KEY:}\n    timeout: ${PAYMENT_TIMEOUT:30s}\n  \n  notification-service:\n    base-url: ${NOTIFICATION_SERVICE_URL:https://api.notifications.com}\n    api-key: ${NOTIFICATION_API_KEY:}\n    timeout: ${NOTIFICATION_TIMEOUT:15s}\n\n# =============================================================================\n# BUSINESS LOGIC CONFIGURATION\n# =============================================================================\nbusiness:\n  pagination:\n    default-page-size: ${DEFAULT_PAGE_SIZE:20}\n    max-page-size: ${MAX_PAGE_SIZE:100}\n  \n  validation:\n    max-username-length: ${MAX_USERNAME_LENGTH:50}\n    min-password-length: ${MIN_PASSWORD_LENGTH:8}\n    password-require-special-chars: ${PASSWORD_REQUIRE_SPECIAL:true}\n  \n  features:\n    user-registration: ${FEATURE_USER_REGISTRATION:true}\n    email-verification: ${FEATURE_EMAIL_VERIFICATION:true}\n    two-factor-auth: ${FEATURE_2FA:false}\n    maintenance-mode: ${MAINTENANCE_MODE:false}\n\n# =============================================================================\n# PROFILE-SPECIFIC CONFIGURATIONS\n# =============================================================================\n\n---\n# DEVELOPMENT PROFILE\nspring:\n  config:\n    activate:\n      on-profile: development\n\n  # Development Database (H2)\n  datasource:\n    url: jdbc:h2:mem:devdb\n    driver-class-name: org.h2.Driver\n    username: sa\n    password: \n  \n  h2:\n    console:\n      enabled: true\n      path: /h2-console\n  \n  jpa:\n    hibernate:\n      ddl-auto: create-drop\n    show-sql: true\n\n# Development Logging\nlogging:\n  level:\n    root: DEBUG\n    org.springframework.web: DEBUG\n    org.hibernate.SQL: DEBUG\n    org.hibernate.type.descriptor.sql.BasicBinder: TRACE\n\n# Development Features\nbusiness:\n  features:\n    maintenance-mode: false\n\n---\n# PRODUCTION PROFILE\nspring:\n  config:\n    activate:\n      on-profile: production\n\n# Production Database Pool\n  datasource:\n    hikari:\n      maximum-pool-size: 50\n      minimum-idle: 10\n\n# Production Logging\nlogging:\n  level:\n    root: WARN\n    com.enterprise.api: INFO\n    org.springframework.web: WARN\n\n# Production Security\nmanagement:\n  endpoint:\n    health:\n      show-details: never\n\n# Production Features\nspringdoc:\n  swagger-ui:\n    enabled: false\n\n---\n# TESTING PROFILE\nspring:\n  config:\n    activate:\n      on-profile: testing\n\n  datasource:\n    url: jdbc:h2:mem:testdb\n    driver-class-name: org.h2.Driver\n    username: sa\n    password: \n\n  jpa:\n    hibernate:\n      ddl-auto: create-drop\n\nlogging:\n  level:\n    root: WARN\n    com.enterprise.api: DEBUG\n'})}),"\n",(0,s.jsx)(n.h2,{id:"environment-variables--docker",children:"Environment Variables & Docker"}),"\n",(0,s.jsx)(n.h3,{id:"env-file-structure",children:".env File Structure"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:".env"})," file for your Docker setup:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# =============================================================================\n# DOCKER ENVIRONMENT CONFIGURATION\n# =============================================================================\n\n# Application Configuration\nAPP_NAME=Enterprise API\nAPP_VERSION=1.0.0\nSPRING_PROFILES_ACTIVE=production\n\n# Server Configuration\nSERVER_PORT=8080\nCONTEXT_PATH=/api/v1\n\n# Database Configuration\nDATABASE_URL=jdbc:postgresql://postgres:5432/enterprise\nDB_USERNAME=postgres\nDB_PASSWORD=your_secure_password_here\nDB_POOL_MAX=30\nDB_POOL_MIN=5\n\n# Redis Configuration\nREDIS_HOST=redis\nREDIS_PORT=6379\nREDIS_PASSWORD=your_redis_password\nREDIS_DATABASE=0\n\n# Security Configuration\nJWT_SECRET=your_very_secure_jwt_secret_key_at_least_256_bits_long\nJWT_EXPIRATION=86400000\nCORS_ALLOWED_ORIGINS=https://yourdomain.com,https://app.yourdomain.com\n\n# Email Configuration\nMAIL_HOST=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USERNAME=noreply@yourdomain.com\nMAIL_PASSWORD=your_email_password\nMAIL_SMTP_AUTH=true\nMAIL_SMTP_STARTTLS=true\n\n# External APIs\nPAYMENT_SERVICE_URL=https://api.stripe.com\nPAYMENT_API_KEY=sk_live_your_stripe_key\nNOTIFICATION_SERVICE_URL=https://api.sendgrid.com\nNOTIFICATION_API_KEY=SG.your_sendgrid_key\n\n# Logging Configuration\nLOG_LEVEL_ROOT=INFO\nLOG_LEVEL_APP=INFO\nLOG_FILE_PATH=/app/logs/application.log\n\n# Monitoring\nACTUATOR_ENDPOINTS=health,info,metrics,prometheus\nPROMETHEUS_ENABLED=true\n\n# Features\nFEATURE_USER_REGISTRATION=true\nFEATURE_EMAIL_VERIFICATION=true\nFEATURE_2FA=true\nMAINTENANCE_MODE=false\n\n# File Upload\nMAX_FILE_SIZE=10MB\nUPLOAD_DIR=/app/uploads\nALLOWED_FILE_EXTENSIONS=jpg,jpeg,png,pdf,docx\n\n# Rate Limiting\nRATE_LIMITING_ENABLED=true\nRATE_LIMIT_REQUESTS=1000\nRATE_LIMIT_BURST=1500\n"})}),"\n",(0,s.jsx)(n.h3,{id:"docker-compose-configuration",children:"Docker Compose Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  app:\n    build: \n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - "${SERVER_PORT:-8080}:8080"\n    environment:\n      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-production}\n    env_file:\n      - .env\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - ./logs:/app/logs\n      - ./uploads:/app/uploads\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: enterprise\n      POSTGRES_USER: ${DB_USERNAME}\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - "5432:5432"\n    restart: unless-stopped\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --requirepass ${REDIS_PASSWORD}\n    ports:\n      - "6379:6379"\n    volumes:\n      - redis_data:/data\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n'})}),"\n",(0,s.jsx)(n.h3,{id:"dockerfile-example",children:"Dockerfile Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'FROM openjdk:17-jdk-slim\n\nWORKDIR /app\n\n# Copy the JAR file\nCOPY target/enterprise-api-*.jar app.jar\n\n# Create directories for logs and uploads\nRUN mkdir -p /app/logs /app/uploads\n\n# Create non-root user\nRUN addgroup --system spring && adduser --system spring --ingroup spring\nRUN chown -R spring:spring /app\nUSER spring:spring\n\n# Expose port\nEXPOSE 8080\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\\n  CMD curl -f http://localhost:8080/actuator/health || exit 1\n\n# Run the application\nENTRYPOINT ["java", "-jar", "app.jar"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"property-categories-explained",children:"Property Categories Explained"}),"\n",(0,s.jsx)(n.h3,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Environment Variable"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"server.port"})}),(0,s.jsx)(n.td,{children:"Application port"}),(0,s.jsx)(n.td,{children:"8080"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SERVER_PORT"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"server.servlet.context-path"})}),(0,s.jsx)(n.td,{children:"Base path for APIs"}),(0,s.jsx)(n.td,{children:"/"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CONTEXT_PATH"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"server.tomcat.max-threads"})}),(0,s.jsx)(n.td,{children:"Max HTTP threads"}),(0,s.jsx)(n.td,{children:"200"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TOMCAT_MAX_THREADS"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"database-properties",children:"Database Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Environment Variable"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spring.datasource.url"})}),(0,s.jsx)(n.td,{children:"Database connection URL"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DATABASE_URL"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spring.datasource.username"})}),(0,s.jsx)(n.td,{children:"Database username"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DB_USERNAME"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spring.datasource.password"})}),(0,s.jsx)(n.td,{children:"Database password"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DB_PASSWORD"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spring.datasource.hikari.maximum-pool-size"})}),(0,s.jsx)(n.td,{children:"Max connections"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DB_POOL_MAX"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"redis-properties",children:"Redis Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Environment Variable"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spring.redis.host"})}),(0,s.jsx)(n.td,{children:"Redis server host"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"REDIS_HOST"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spring.redis.port"})}),(0,s.jsx)(n.td,{children:"Redis server port"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"REDIS_PORT"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"spring.redis.password"})}),(0,s.jsx)(n.td,{children:"Redis password"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"REDIS_PASSWORD"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"security-properties",children:"Security Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Environment Variable"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"security.jwt.secret"})}),(0,s.jsx)(n.td,{children:"JWT signing key"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"JWT_SECRET"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"security.jwt.expiration"})}),(0,s.jsx)(n.td,{children:"JWT expiration time"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"JWT_EXPIRATION"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"security.cors.allowed-origins"})}),(0,s.jsx)(n.td,{children:"CORS allowed origins"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CORS_ALLOWED_ORIGINS"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"logging-properties",children:"Logging Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Environment Variable"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"logging.level.root"})}),(0,s.jsx)(n.td,{children:"Root log level"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LOG_LEVEL_ROOT"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"logging.file.name"})}),(0,s.jsx)(n.td,{children:"Log file location"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LOG_FILE_PATH"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"logging.file.max-size"})}),(0,s.jsx)(n.td,{children:"Max log file size"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LOG_FILE_MAX_SIZE"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"docker-setup-with-environment-files",children:"Docker Setup with Environment Files"}),"\n",(0,s.jsx)(n.h3,{id:"1-development-setup",children:"1. Development Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create development environment file\ncp .env .env.development\n\n# Edit .env.development for local development\nSPRING_PROFILES_ACTIVE=development\nDATABASE_URL=jdbc:h2:mem:devdb\nLOG_LEVEL_ROOT=DEBUG\n\n# Run with development profile\ndocker-compose --env-file .env.development up -d\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-production-setup",children:"2. Production Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create production environment file\ncp .env .env.production\n\n# Edit .env.production for production\nSPRING_PROFILES_ACTIVE=production\nDATABASE_URL=jdbc:postgresql://prod-postgres:5432/enterprise\nLOG_LEVEL_ROOT=WARN\nJWT_SECRET=your_super_secure_production_jwt_secret\n\n# Run with production profile\ndocker-compose --env-file .env.production up -d\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-using-docker-secrets-recommended-for-production",children:"3. Using Docker Secrets (Recommended for Production)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# docker-compose.prod.yml\nversion: '3.8'\n\nservices:\n  app:\n    image: your-registry/enterprise-api:latest\n    environment:\n      - SPRING_PROFILES_ACTIVE=production\n      - DATABASE_URL=jdbc:postgresql://postgres:5432/enterprise\n    secrets:\n      - db_password\n      - jwt_secret\n      - redis_password\n    command: >\n      sh -c \"\n        export DB_PASSWORD=$$(cat /run/secrets/db_password) &&\n        export JWT_SECRET=$$(cat /run/secrets/jwt_secret) &&\n        export REDIS_PASSWORD=$$(cat /run/secrets/redis_password) &&\n        java -jar app.jar\n      \"\n\nsecrets:\n  db_password:\n    external: true\n  jwt_secret:\n    external: true\n  redis_password:\n    external: true\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-environment-variables",children:"1. Environment Variables"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Always use environment variables for sensitive data"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Provide default values for non-sensitive properties"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use descriptive environment variable names"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"Never commit secrets to version control"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-property-organization",children:"2. Property Organization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Group related properties together"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use consistent naming conventions"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Document complex properties with comments"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use profile-specific configurations"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-security",children:"3. Security"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use strong, unique secrets for each environment"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Rotate secrets regularly"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use Docker secrets or external secret management"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Validate input properties"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-performance",children:"4. Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Tune connection pools based on load"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Configure appropriate timeouts"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Set reasonable cache TTL values"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Monitor and adjust based on metrics"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-deployment",children:"5. Deployment"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Use different .env files for different environments"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Implement health checks"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Configure proper logging levels"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Test configuration changes in staging first"})]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Generated on:"})," 2025-07-26 22:19:11 UTC",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"For:"})," oussamalahrizi",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"File:"})," spring-boot-properties-guide.md"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);