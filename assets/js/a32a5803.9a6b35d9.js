"use strict";(self.webpackChunkjava_learn=self.webpackChunkjava_learn||[]).push([[32],{6655:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"django-vs-springboot/dependency-injection","title":"Apps vs Modules and Dependency Injection","description":"This section explains how Django\'s app-based architecture translates to Spring Boot\'s module structure and how Django\'s implicit dependencies become explicit dependency injection in Spring Boot.","source":"@site/docs/django-vs-springboot/dependency-injection.md","sourceDirName":"django-vs-springboot","slug":"/django-vs-springboot/dependency-injection","permalink":"/docs/django-vs-springboot/dependency-injection","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"DjangoVsSpringBoot","previous":{"title":"database-migrations","permalink":"/docs/django-vs-springboot/database-migrations"},"next":{"title":"deployment","permalink":"/docs/django-vs-springboot/deployment"}}');var s=i(4848),t=i(8453);const o={},a="Apps vs Modules and Dependency Injection",l={},c=[{value:"Django Apps Architecture",id:"django-apps-architecture",level:2},{value:"Django App Concept",id:"django-app-concept",level:3},{value:"Django Inter-App Dependencies",id:"django-inter-app-dependencies",level:3},{value:"Spring Boot Module Architecture",id:"spring-boot-module-architecture",level:2},{value:"Spring Boot Module Structure",id:"spring-boot-module-structure",level:3},{value:"Cross-Module Dependencies with Dependency Injection",id:"cross-module-dependencies-with-dependency-injection",level:3},{value:"Dependency Injection Types",id:"dependency-injection-types",level:2},{value:"Constructor Injection (Recommended)",id:"constructor-injection-recommended",level:3},{value:"Field Injection (Not Recommended)",id:"field-injection-not-recommended",level:3},{value:"Setter Injection (Rare Use Cases)",id:"setter-injection-rare-use-cases",level:3},{value:"Configuration and Bean Definition",id:"configuration-and-bean-definition",level:2},{value:"Java Configuration",id:"java-configuration",level:3},{value:"Profile-Based Configuration",id:"profile-based-configuration",level:3},{value:"Testing with Dependency Injection",id:"testing-with-dependency-injection",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Migration Strategy: From Django Apps to Spring Boot Modules",id:"migration-strategy-from-django-apps-to-spring-boot-modules",level:2},{value:"Step 1: Identify Django App Boundaries",id:"step-1-identify-django-app-boundaries",level:3},{value:"Step 2: Map to Spring Boot Modules",id:"step-2-map-to-spring-boot-modules",level:3},{value:"Step 3: Identify Dependencies",id:"step-3-identify-dependencies",level:3},{value:"Step 4: Convert Services",id:"step-4-convert-services",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Django App Best Practices",id:"django-app-best-practices",level:3},{value:"Spring Boot Module Best Practices",id:"spring-boot-module-best-practices",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"apps-vs-modules-and-dependency-injection",children:"Apps vs Modules and Dependency Injection"})}),"\n",(0,s.jsx)(n.p,{children:"This section explains how Django's app-based architecture translates to Spring Boot's module structure and how Django's implicit dependencies become explicit dependency injection in Spring Boot."}),"\n",(0,s.jsx)(n.h2,{id:"django-apps-architecture",children:"Django Apps Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"django-app-concept",children:"Django App Concept"}),"\n",(0,s.jsx)(n.p,{children:"In Django, apps are reusable Python packages that encapsulate related functionality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# users/apps.py\nfrom django.apps import AppConfig\n\nclass UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'\n    \n    def ready(self):\n        # Import signals when app is ready\n        import users.signals\n\n# users/models.py\nfrom django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=150, unique=True)\n    email = models.EmailField(unique=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n# users/views.py\nfrom django.shortcuts import get_object_or_404\nfrom rest_framework import viewsets, status\nfrom rest_framework.response import Response\nfrom .models import User\nfrom .serializers import UserSerializer\n\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    \n    def create(self, request):\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            user = serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n# users/services.py (if you separate business logic)\nfrom django.core.mail import send_mail\nfrom .models import User\n\nclass UserService:\n    @staticmethod\n    def create_user_with_welcome_email(user_data):\n        user = User.objects.create(**user_data)\n        UserService.send_welcome_email(user)\n        return user\n    \n    @staticmethod\n    def send_welcome_email(user):\n        send_mail(\n            'Welcome!',\n            f'Welcome {user.username}!',\n            'from@example.com',\n            [user.email],\n        )\n\n# settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'rest_framework',\n    'users',  # App registration\n    'blog',\n    'notifications',\n]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"django-inter-app-dependencies",children:"Django Inter-App Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# blog/models.py\nfrom django.db import models\nfrom users.models import User  # Direct import\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n# blog/views.py\nfrom users.models import User\nfrom notifications.services import NotificationService  # Direct import\n\nclass PostViewSet(viewsets.ModelViewSet):\n    def create(self, request):\n        # Business logic mixed with view logic\n        serializer = self.get_serializer(data=request.data)\n        if serializer.is_valid():\n            post = serializer.save()\n            \n            # Direct service call\n            NotificationService.notify_followers(post.author, post)\n            \n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"spring-boot-module-architecture",children:"Spring Boot Module Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"spring-boot-module-structure",children:"Spring Boot Module Structure"}),"\n",(0,s.jsx)(n.p,{children:"Spring Boot uses package-based modules with explicit dependency injection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Application main class\n@SpringBootApplication\n@EnableJpaRepositories\n@ComponentScan(basePackages = "com.company.myproject")\npublic class MyProjectApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyProjectApplication.class, args);\n    }\n}\n\n// user/model/User.java - Entity (Django Model equivalent)\n@Entity\n@Table(name = "users")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true)\n    private String username;\n    \n    @Column(unique = true)\n    private String email;\n    \n    @Column(name = "is_active")\n    private Boolean isActive = true;\n    \n    @CreationTimestamp\n    private LocalDateTime createdAt;\n    \n    @OneToMany(mappedBy = "author", cascade = CascadeType.ALL)\n    private List<Post> posts = new ArrayList<>();\n}\n\n// user/repository/UserRepository.java - Data Access Layer\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findByUsername(String username);\n    Optional<User> findByEmail(String email);\n    List<User> findByIsActiveTrue();\n    \n    @Query("SELECT u FROM User u WHERE u.username LIKE %:query% OR u.email LIKE %:query%")\n    List<User> searchUsers(@Param("query") String query);\n}\n\n// user/service/UserService.java - Business Logic Layer\n@Service\n@Transactional\n@Slf4j\npublic class UserService {\n    \n    private final UserRepository userRepository;\n    private final EmailService emailService;  // Injected dependency\n    private final ModelMapper modelMapper;\n    \n    // Constructor injection (preferred)\n    public UserService(UserRepository userRepository, \n                      EmailService emailService, \n                      ModelMapper modelMapper) {\n        this.userRepository = userRepository;\n        this.emailService = emailService;\n        this.modelMapper = modelMapper;\n    }\n    \n    public UserDTO createUser(CreateUserRequest request) {\n        // Validation\n        if (userRepository.findByEmail(request.getEmail()).isPresent()) {\n            throw new EmailAlreadyExistsException("Email already exists: " + request.getEmail());\n        }\n        \n        // Create user\n        User user = User.builder()\n                .username(request.getUsername())\n                .email(request.getEmail())\n                .isActive(true)\n                .build();\n        \n        User savedUser = userRepository.save(user);\n        \n        // Send welcome email (delegated to injected service)\n        emailService.sendWelcomeEmail(savedUser);\n        \n        // Convert to DTO\n        return modelMapper.map(savedUser, UserDTO.class);\n    }\n    \n    public Optional<UserDTO> findByEmail(String email) {\n        return userRepository.findByEmail(email)\n                .map(user -> modelMapper.map(user, UserDTO.class));\n    }\n    \n    public List<UserDTO> searchUsers(String query) {\n        return userRepository.searchUsers(query).stream()\n                .map(user -> modelMapper.map(user, UserDTO.class))\n                .collect(Collectors.toList());\n    }\n}\n\n// user/controller/UserController.java - Web Layer\n@RestController\n@RequestMapping("/api/v1/users")\n@CrossOrigin(origins = "*")\n@Validated\n@Slf4j\npublic class UserController {\n    \n    private final UserService userService;  // Injected dependency\n    \n    // Constructor injection\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n    \n    @PostMapping\n    public ResponseEntity<UserDTO> createUser(@Valid @RequestBody CreateUserRequest request) {\n        log.info("Creating user with email: {}", request.getEmail());\n        \n        UserDTO user = userService.createUser(request);\n        \n        return ResponseEntity.status(HttpStatus.CREATED).body(user);\n    }\n    \n    @GetMapping("/search")\n    public ResponseEntity<List<UserDTO>> searchUsers(@RequestParam String query) {\n        List<UserDTO> users = userService.searchUsers(query);\n        return ResponseEntity.ok(users);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cross-module-dependencies-with-dependency-injection",children:"Cross-Module Dependencies with Dependency Injection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// blog/model/Post.java\n@Entity\n@Table(name = "posts")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class Post {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    private String title;\n    \n    @Column(columnDefinition = "TEXT")\n    private String content;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "author_id")\n    private User author;  // Reference to User entity\n    \n    @CreationTimestamp\n    private LocalDateTime createdAt;\n}\n\n// blog/service/PostService.java\n@Service\n@Transactional\n@Slf4j\npublic class PostService {\n    \n    private final PostRepository postRepository;\n    private final UserService userService;  // Cross-module dependency\n    private final NotificationService notificationService;  // Another dependency\n    private final ModelMapper modelMapper;\n    \n    // All dependencies injected through constructor\n    public PostService(PostRepository postRepository,\n                      UserService userService,\n                      NotificationService notificationService,\n                      ModelMapper modelMapper) {\n        this.postRepository = postRepository;\n        this.userService = userService;\n        this.notificationService = notificationService;\n        this.modelMapper = modelMapper;\n    }\n    \n    public PostDTO createPost(CreatePostRequest request, String authorEmail) {\n        // Get user through injected service\n        UserDTO author = userService.findByEmail(authorEmail)\n                .orElseThrow(() -> new UserNotFoundException("User not found: " + authorEmail));\n        \n        // Create post\n        Post post = Post.builder()\n                .title(request.getTitle())\n                .content(request.getContent())\n                .author(modelMapper.map(author, User.class))\n                .build();\n        \n        Post savedPost = postRepository.save(post);\n        \n        // Notify followers through injected service\n        notificationService.notifyFollowers(author, savedPost);\n        \n        return modelMapper.map(savedPost, PostDTO.class);\n    }\n}\n\n// notification/service/NotificationService.java\n@Service\n@Async  // Asynchronous processing\n@Slf4j\npublic class NotificationService {\n    \n    private final NotificationRepository notificationRepository;\n    private final EmailService emailService;\n    private final UserService userService;\n    \n    public NotificationService(NotificationRepository notificationRepository,\n                             EmailService emailService,\n                             UserService userService) {\n        this.notificationRepository = notificationRepository;\n        this.emailService = emailService;\n        this.userService = userService;\n    }\n    \n    @Async\n    public void notifyFollowers(UserDTO author, Post post) {\n        log.info("Notifying followers about new post: {}", post.getTitle());\n        \n        // Get followers (this would typically involve a follower relationship)\n        List<UserDTO> followers = getFollowers(author.getId());\n        \n        followers.forEach(follower -> {\n            // Create notification record\n            Notification notification = Notification.builder()\n                    .recipientId(follower.getId())\n                    .message(String.format("%s posted: %s", author.getUsername(), post.getTitle()))\n                    .type(NotificationType.NEW_POST)\n                    .isRead(false)\n                    .build();\n            \n            notificationRepository.save(notification);\n            \n            // Send email notification\n            emailService.sendNotificationEmail(follower.getEmail(), notification.getMessage());\n        });\n    }\n    \n    private List<UserDTO> getFollowers(Long userId) {\n        // Implementation would depend on your follower model\n        return Collections.emptyList();\n    }\n}\n\n// common/service/EmailService.java\n@Service\n@Slf4j\npublic class EmailService {\n    \n    private final JavaMailSender mailSender;\n    private final String fromEmail;\n    \n    public EmailService(JavaMailSender mailSender, \n                       @Value("${app.email.from}") String fromEmail) {\n        this.mailSender = mailSender;\n        this.fromEmail = fromEmail;\n    }\n    \n    @Async\n    public void sendWelcomeEmail(User user) {\n        try {\n            SimpleMailMessage message = new SimpleMailMessage();\n            message.setFrom(fromEmail);\n            message.setTo(user.getEmail());\n            message.setSubject("Welcome!");\n            message.setText(String.format("Welcome %s!", user.getUsername()));\n            \n            mailSender.send(message);\n            log.info("Welcome email sent to: {}", user.getEmail());\n        } catch (Exception e) {\n            log.error("Failed to send welcome email to: {}", user.getEmail(), e);\n        }\n    }\n    \n    @Async\n    public void sendNotificationEmail(String email, String message) {\n        try {\n            SimpleMailMessage mailMessage = new SimpleMailMessage();\n            mailMessage.setFrom(fromEmail);\n            mailMessage.setTo(email);\n            mailMessage.setSubject("New Notification");\n            mailMessage.setText(message);\n            \n            mailSender.send(mailMessage);\n            log.info("Notification email sent to: {}", email);\n        } catch (Exception e) {\n            log.error("Failed to send notification email to: {}", email, e);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"dependency-injection-types",children:"Dependency Injection Types"}),"\n",(0,s.jsx)(n.h3,{id:"constructor-injection-recommended",children:"Constructor Injection (Recommended)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Service\npublic class UserService {\n    \n    private final UserRepository userRepository;\n    private final EmailService emailService;\n    \n    // Constructor injection - immutable dependencies\n    public UserService(UserRepository userRepository, EmailService emailService) {\n        this.userRepository = userRepository;\n        this.emailService = emailService;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"field-injection-not-recommended",children:"Field Injection (Not Recommended)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Service\npublic class UserService {\n    \n    @Autowired\n    private UserRepository userRepository;  // Field injection\n    \n    @Autowired\n    private EmailService emailService;\n    \n    // Problems: harder to test, mutable dependencies, reflection required\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"setter-injection-rare-use-cases",children:"Setter Injection (Rare Use Cases)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Service\npublic class UserService {\n    \n    private UserRepository userRepository;\n    private EmailService emailService;\n    \n    @Autowired\n    public void setUserRepository(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n    \n    @Autowired\n    public void setEmailService(EmailService emailService) {\n        this.emailService = emailService;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration-and-bean-definition",children:"Configuration and Bean Definition"}),"\n",(0,s.jsx)(n.h3,{id:"java-configuration",children:"Java Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\n@ComponentScan(basePackages = "com.company.myproject")\npublic class ApplicationConfig {\n    \n    @Bean\n    public ModelMapper modelMapper() {\n        ModelMapper mapper = new ModelMapper();\n        mapper.getConfiguration()\n                .setMatchingStrategy(MatchingStrategies.STRICT)\n                .setFieldMatchingEnabled(true);\n        return mapper;\n    }\n    \n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n    \n    @Bean\n    @Primary\n    public ObjectMapper objectMapper() {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.registerModule(new JavaTimeModule());\n        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        return mapper;\n    }\n    \n    // Conditional bean creation\n    @Bean\n    @ConditionalOnProperty(name = "app.features.analytics", havingValue = "true")\n    public AnalyticsService analyticsService() {\n        return new AnalyticsServiceImpl();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"profile-based-configuration",children:"Profile-Based Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\n@Profile("development")\npublic class DevConfig {\n    \n    @Bean\n    @Primary\n    public EmailService emailService() {\n        return new MockEmailService();  // Mock for development\n    }\n}\n\n@Configuration\n@Profile("production")\npublic class ProdConfig {\n    \n    @Bean\n    @Primary\n    public EmailService emailService(JavaMailSender mailSender, \n                                   @Value("${app.email.from}") String fromEmail) {\n        return new SmtpEmailService(mailSender, fromEmail);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-with-dependency-injection",children:"Testing with Dependency Injection"}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n    \n    @Mock\n    private UserRepository userRepository;\n    \n    @Mock\n    private EmailService emailService;\n    \n    @Mock\n    private ModelMapper modelMapper;\n    \n    @InjectMocks\n    private UserService userService;\n    \n    @Test\n    void createUser_ShouldCreateUserAndSendEmail() {\n        // Given\n        CreateUserRequest request = CreateUserRequest.builder()\n                .username("testuser")\n                .email("test@example.com")\n                .build();\n        \n        User savedUser = User.builder()\n                .id(1L)\n                .username("testuser")\n                .email("test@example.com")\n                .build();\n        \n        UserDTO expectedDto = UserDTO.builder()\n                .id(1L)\n                .username("testuser")\n                .email("test@example.com")\n                .build();\n        \n        when(userRepository.findByEmail(request.getEmail())).thenReturn(Optional.empty());\n        when(userRepository.save(any(User.class))).thenReturn(savedUser);\n        when(modelMapper.map(savedUser, UserDTO.class)).thenReturn(expectedDto);\n        \n        // When\n        UserDTO result = userService.createUser(request);\n        \n        // Then\n        assertThat(result).isEqualTo(expectedDto);\n        verify(emailService).sendWelcomeEmail(savedUser);\n        verify(userRepository).save(any(User.class));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@TestPropertySource(locations = "classpath:application-test.properties")\n@Transactional\nclass UserServiceIntegrationTest {\n    \n    @Autowired\n    private UserService userService;\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Test\n    void createUser_IntegrationTest() {\n        // Given\n        CreateUserRequest request = CreateUserRequest.builder()\n                .username("integrationtest")\n                .email("integration@test.com")\n                .build();\n        \n        // When\n        UserDTO result = userService.createUser(request);\n        \n        // Then\n        assertThat(result.getUsername()).isEqualTo("integrationtest");\n        assertThat(result.getEmail()).isEqualTo("integration@test.com");\n        \n        Optional<User> savedUser = userRepository.findByEmail("integration@test.com");\n        assertThat(savedUser).isPresent();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"migration-strategy-from-django-apps-to-spring-boot-modules",children:"Migration Strategy: From Django Apps to Spring Boot Modules"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-identify-django-app-boundaries",children:"Step 1: Identify Django App Boundaries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Current Django structure\nusers/          # User management\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 views.py\n\u251c\u2500\u2500 serializers.py\n\u2514\u2500\u2500 services.py\n\nblog/           # Blog functionality\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 views.py\n\u251c\u2500\u2500 serializers.py\n\u2514\u2500\u2500 services.py\n\nnotifications/  # Notification system\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 views.py\n\u251c\u2500\u2500 serializers.py\n\u2514\u2500\u2500 services.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-map-to-spring-boot-modules",children:"Step 2: Map to Spring Boot Modules"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Target Spring Boot structure\nuser/\n\u251c\u2500\u2500 model/\n\u251c\u2500\u2500 repository/\n\u251c\u2500\u2500 service/\n\u251c\u2500\u2500 controller/\n\u2514\u2500\u2500 dto/\n\nblog/\n\u251c\u2500\u2500 model/\n\u251c\u2500\u2500 repository/\n\u251c\u2500\u2500 service/\n\u251c\u2500\u2500 controller/\n\u2514\u2500\u2500 dto/\n\nnotification/\n\u251c\u2500\u2500 model/\n\u251c\u2500\u2500 repository/\n\u251c\u2500\u2500 service/\n\u251c\u2500\u2500 controller/\n\u2514\u2500\u2500 dto/\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-identify-dependencies",children:"Step 3: Identify Dependencies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Django: Implicit dependencies (direct imports)\nfrom users.models import User\nfrom notifications.services import NotificationService\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Spring Boot: Explicit dependencies (constructor injection)\npublic PostService(UserService userService, NotificationService notificationService) {\n    this.userService = userService;\n    this.notificationService = notificationService;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-convert-services",children:"Step 4: Convert Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Django service (static methods, direct imports)\nclass UserService:\n    @staticmethod\n    def create_user_with_welcome_email(user_data):\n        user = User.objects.create(**user_data)\n        send_mail(...)  # Direct mail sending\n        return user\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Spring Boot service (dependency injection)\n@Service\npublic class UserService {\n    \n    private final UserRepository userRepository;\n    private final EmailService emailService;\n    \n    public UserService(UserRepository userRepository, EmailService emailService) {\n        this.userRepository = userRepository;\n        this.emailService = emailService;\n    }\n    \n    public UserDTO createUser(CreateUserRequest request) {\n        User user = userRepository.save(...);\n        emailService.sendWelcomeEmail(user);  // Injected service\n        return convertToDto(user);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"django-app-best-practices",children:"Django App Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep apps focused on single responsibility"}),"\n",(0,s.jsx)(n.li,{children:"Avoid circular imports between apps"}),"\n",(0,s.jsx)(n.li,{children:"Use services to encapsulate business logic"}),"\n",(0,s.jsx)(n.li,{children:"Minimize direct model imports across apps"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"spring-boot-module-best-practices",children:"Spring Boot Module Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use constructor injection over field injection"}),"\n",(0,s.jsx)(n.li,{children:"Keep dependencies minimal and focused"}),"\n",(0,s.jsx)(n.li,{children:"Use interfaces for service contracts"}),"\n",(0,s.jsx)(n.li,{children:"Leverage Spring profiles for environment-specific beans"}),"\n",(0,s.jsx)(n.li,{children:"Write tests that mock dependencies properly"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"@Qualifier"})," for multiple implementations"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Aspect"}),(0,s.jsx)(n.th,{children:"Django Apps"}),(0,s.jsx)(n.th,{children:"Spring Boot Modules"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Organization"})}),(0,s.jsx)(n.td,{children:"Python packages"}),(0,s.jsx)(n.td,{children:"Java packages"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Registration"})}),(0,s.jsx)(n.td,{children:"INSTALLED_APPS"}),(0,s.jsx)(n.td,{children:"Component scanning"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Dependencies"})}),(0,s.jsx)(n.td,{children:"Direct imports"}),(0,s.jsx)(n.td,{children:"Dependency injection"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Coupling"})}),(0,s.jsx)(n.td,{children:"Tight (direct imports)"}),(0,s.jsx)(n.td,{children:"Loose (interface-based)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Testing"})}),(0,s.jsx)(n.td,{children:"Manual mocking"}),(0,s.jsx)(n.td,{children:"Framework-supported mocking"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Configuration"})}),(0,s.jsx)(n.td,{children:"settings.py"}),(0,s.jsx)(n.td,{children:"@Configuration classes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Lifecycle"})}),(0,s.jsx)(n.td,{children:"AppConfig.ready()"}),(0,s.jsx)(n.td,{children:"@PostConstruct, @PreDestroy"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"The key transition is moving from Django's implicit dependencies through direct imports to Spring Boot's explicit dependency injection, which provides better testability, modularity, and inversion of control."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);