"use strict";(self.webpackChunkjava_learn=self.webpackChunkjava_learn||[]).push([[24],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},9405:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"django-vs-springboot/models-orm","title":"Models and ORM Comparison","description":"This section compares Django\'s model system and ORM with Spring Boot\'s JPA entities and Spring Data, showing how to translate your Django models to JPA entities.","source":"@site/docs/django-vs-springboot/models-orm.md","sourceDirName":"django-vs-springboot","slug":"/django-vs-springboot/models-orm","permalink":"/docs/django-vs-springboot/models-orm","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"DjangoVsSpringBoot","previous":{"title":"migration-strategy","permalink":"/docs/django-vs-springboot/migration-strategy"},"next":{"title":"Project Structure Comparison","permalink":"/docs/django-vs-springboot/project-structure"}}');var i=t(4848),s=t(8453);const r={},o="Models and ORM Comparison",l={},d=[{value:"Django Models Overview",id:"django-models-overview",level:2},{value:"Basic Django Model",id:"basic-django-model",level:3},{value:"Spring Boot JPA Entities",id:"spring-boot-jpa-entities",level:2},{value:"Equivalent JPA Entities",id:"equivalent-jpa-entities",level:3},{value:"Repository Layer (Spring Data JPA)",id:"repository-layer-spring-data-jpa",level:2},{value:"Django ORM vs Spring Data Repositories",id:"django-orm-vs-spring-data-repositories",level:3},{value:"Django QuerySet Operations",id:"django-queryset-operations",level:4},{value:"Spring Data JPA Repositories",id:"spring-data-jpa-repositories",level:4},{value:"Advanced Query Techniques",id:"advanced-query-techniques",level:2},{value:"Django Complex Queries",id:"django-complex-queries",level:3},{value:"Spring Data JPA Advanced Queries",id:"spring-data-jpa-advanced-queries",level:3},{value:"Entity Lifecycle and Auditing",id:"entity-lifecycle-and-auditing",level:2},{value:"Django Model Lifecycle",id:"django-model-lifecycle",level:3},{value:"Spring Boot Entity Lifecycle",id:"spring-boot-entity-lifecycle",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Django Query Optimization",id:"django-query-optimization",level:3},{value:"Spring Boot JPA Optimization",id:"spring-boot-jpa-optimization",level:3},{value:"Migration Summary",id:"migration-summary",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"models-and-orm-comparison",children:"Models and ORM Comparison"})}),"\n",(0,i.jsx)(n.p,{children:"This section compares Django's model system and ORM with Spring Boot's JPA entities and Spring Data, showing how to translate your Django models to JPA entities."}),"\n",(0,i.jsx)(n.h2,{id:"django-models-overview",children:"Django Models Overview"}),"\n",(0,i.jsx)(n.h3,{id:"basic-django-model",children:"Basic Django Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# users/models.py\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom django.core.validators import MinLengthValidator\n\nclass User(AbstractUser):\n    email = models.EmailField(unique=True)\n    phone_number = models.CharField(max_length=20, blank=True, null=True)\n    date_of_birth = models.DateField(blank=True, null=True)\n    is_verified = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    # Override username field\n    username = models.CharField(\n        max_length=150,\n        unique=True,\n        validators=[MinLengthValidator(3)]\n    )\n    \n    class Meta:\n        db_table = 'custom_users'\n        ordering = ['-created_at']\n        indexes = [\n            models.Index(fields=['email']),\n            models.Index(fields=['username']),\n        ]\n    \n    def __str__(self):\n        return self.username\n    \n    def get_full_name(self):\n        return f\"{self.first_name} {self.last_name}\".strip()\n\n# blog/models.py\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(unique=True)\n    description = models.TextField(blank=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        verbose_name_plural = \"categories\"\n        ordering = ['name']\n    \n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('published', 'Published'),\n        ('archived', 'Archived'),\n    ]\n    \n    title = models.CharField(max_length=200)\n    slug = models.SlugField(unique=True)\n    content = models.TextField()\n    excerpt = models.TextField(max_length=500, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')\n    \n    # Relationships\n    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='posts')\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    tags = models.ManyToManyField('Tag', blank=True, related_name='posts')\n    \n    # Timestamps\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    published_at = models.DateTimeField(null=True, blank=True)\n    \n    # SEO fields\n    meta_title = models.CharField(max_length=200, blank=True)\n    meta_description = models.TextField(max_length=300, blank=True)\n    \n    # Statistics\n    view_count = models.PositiveIntegerField(default=0)\n    like_count = models.PositiveIntegerField(default=0)\n    \n    class Meta:\n        ordering = ['-created_at']\n        indexes = [\n            models.Index(fields=['status', 'published_at']),\n            models.Index(fields=['author', 'status']),\n            models.Index(fields=['category']),\n        ]\n        constraints = [\n            models.CheckConstraint(\n                check=models.Q(view_count__gte=0),\n                name='positive_view_count'\n            )\n        ]\n    \n    def __str__(self):\n        return self.title\n    \n    @property\n    def is_published(self):\n        return self.status == 'published'\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    slug = models.SlugField(unique=True)\n    color = models.CharField(max_length=7, default='#007bff')  # Hex color\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        ordering = ['name']\n    \n    def __str__(self):\n        return self.name\n\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='replies')\n    \n    content = models.TextField()\n    is_approved = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        ordering = ['created_at']\n        indexes = [\n            models.Index(fields=['post', 'is_approved']),\n        ]\n    \n    def __str__(self):\n        return f\"Comment by {self.author.username} on {self.post.title}\"\n"})}),"\n",(0,i.jsx)(n.h2,{id:"spring-boot-jpa-entities",children:"Spring Boot JPA Entities"}),"\n",(0,i.jsx)(n.h3,{id:"equivalent-jpa-entities",children:"Equivalent JPA Entities"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// user/model/User.java\n@Entity\n@Table(name = "custom_users", \n       indexes = {\n           @Index(name = "idx_user_email", columnList = "email"),\n           @Index(name = "idx_user_username", columnList = "username")\n       })\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@EntityListeners(AuditingEntityListener.class)\npublic class User {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false, length = 150)\n    @Size(min = 3, max = 150, message = "Username must be between 3 and 150 characters")\n    private String username;\n    \n    @Column(unique = true, nullable = false)\n    @Email(message = "Invalid email format")\n    private String email;\n    \n    @Column(name = "first_name", length = 30)\n    private String firstName;\n    \n    @Column(name = "last_name", length = 150)\n    private String lastName;\n    \n    @Column(name = "phone_number", length = 20)\n    private String phoneNumber;\n    \n    @Column(name = "date_of_birth")\n    private LocalDate dateOfBirth;\n    \n    @Column(name = "is_verified", nullable = false)\n    @Builder.Default\n    private Boolean isVerified = false;\n    \n    @Column(name = "is_active", nullable = false)\n    @Builder.Default\n    private Boolean isActive = true;\n    \n    @CreatedDate\n    @Column(name = "created_at", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n    \n    @LastModifiedDate\n    @Column(name = "updated_at")\n    private LocalDateTime updatedAt;\n    \n    // Relationships\n    @OneToMany(mappedBy = "author", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @Builder.Default\n    private List<Post> posts = new ArrayList<>();\n    \n    @OneToMany(mappedBy = "author", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @Builder.Default\n    private List<Comment> comments = new ArrayList<>();\n    \n    // Business methods\n    public String getFullName() {\n        if (firstName == null && lastName == null) {\n            return username;\n        }\n        return String.format("%s %s", \n                firstName != null ? firstName : "", \n                lastName != null ? lastName : "").trim();\n    }\n    \n    @Override\n    public String toString() {\n        return username;\n    }\n}\n\n// blog/model/Category.java\n@Entity\n@Table(name = "categories")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@EntityListeners(AuditingEntityListener.class)\npublic class Category {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false, length = 100)\n    private String name;\n    \n    @Column(unique = true, nullable = false, length = 100)\n    private String slug;\n    \n    @Column(columnDefinition = "TEXT")\n    private String description;\n    \n    @Column(name = "is_active", nullable = false)\n    @Builder.Default\n    private Boolean isActive = true;\n    \n    @CreatedDate\n    @Column(name = "created_at", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n    \n    // Relationships\n    @OneToMany(mappedBy = "category", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @Builder.Default\n    private List<Post> posts = new ArrayList<>();\n    \n    @Override\n    public String toString() {\n        return name;\n    }\n}\n\n// blog/model/Post.java\n@Entity\n@Table(name = "posts",\n       indexes = {\n           @Index(name = "idx_post_status_published", columnList = "status, published_at"),\n           @Index(name = "idx_post_author_status", columnList = "author_id, status"),\n           @Index(name = "idx_post_category", columnList = "category_id")\n       })\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@EntityListeners(AuditingEntityListener.class)\n@Check(constraints = "view_count >= 0")\npublic class Post {\n    \n    public enum Status {\n        DRAFT("draft"),\n        PUBLISHED("published"),\n        ARCHIVED("archived");\n        \n        private final String value;\n        \n        Status(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n    }\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(nullable = false, length = 200)\n    private String title;\n    \n    @Column(unique = true, nullable = false, length = 200)\n    private String slug;\n    \n    @Column(columnDefinition = "TEXT", nullable = false)\n    private String content;\n    \n    @Column(length = 500)\n    private String excerpt;\n    \n    @Enumerated(EnumType.STRING)\n    @Column(nullable = false, length = 20)\n    @Builder.Default\n    private Status status = Status.DRAFT;\n    \n    // Relationships\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "author_id", nullable = false)\n    private User author;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "category_id")\n    private Category category;\n    \n    @ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n        name = "post_tags",\n        joinColumns = @JoinColumn(name = "post_id"),\n        inverseJoinColumns = @JoinColumn(name = "tag_id")\n    )\n    @Builder.Default\n    private Set<Tag> tags = new HashSet<>();\n    \n    // Timestamps\n    @CreatedDate\n    @Column(name = "created_at", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n    \n    @LastModifiedDate\n    @Column(name = "updated_at")\n    private LocalDateTime updatedAt;\n    \n    @Column(name = "published_at")\n    private LocalDateTime publishedAt;\n    \n    // SEO fields\n    @Column(name = "meta_title", length = 200)\n    private String metaTitle;\n    \n    @Column(name = "meta_description", length = 300)\n    private String metaDescription;\n    \n    // Statistics\n    @Column(name = "view_count", nullable = false)\n    @Builder.Default\n    private Integer viewCount = 0;\n    \n    @Column(name = "like_count", nullable = false)\n    @Builder.Default\n    private Integer likeCount = 0;\n    \n    // Relationships\n    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @Builder.Default\n    private List<Comment> comments = new ArrayList<>();\n    \n    // Business methods\n    public boolean isPublished() {\n        return status == Status.PUBLISHED;\n    }\n    \n    public void incrementViewCount() {\n        this.viewCount++;\n    }\n    \n    public void incrementLikeCount() {\n        this.likeCount++;\n    }\n    \n    @Override\n    public String toString() {\n        return title;\n    }\n}\n\n// blog/model/Tag.java\n@Entity\n@Table(name = "tags")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@EntityListeners(AuditingEntityListener.class)\npublic class Tag {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false, length = 50)\n    private String name;\n    \n    @Column(unique = true, nullable = false, length = 50)\n    private String slug;\n    \n    @Column(length = 7)\n    @Builder.Default\n    private String color = "#007bff";\n    \n    @CreatedDate\n    @Column(name = "created_at", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n    \n    // Relationships\n    @ManyToMany(mappedBy = "tags", fetch = FetchType.LAZY)\n    @Builder.Default\n    private Set<Post> posts = new HashSet<>();\n    \n    @Override\n    public String toString() {\n        return name;\n    }\n}\n\n// blog/model/Comment.java\n@Entity\n@Table(name = "comments",\n       indexes = {\n           @Index(name = "idx_comment_post_approved", columnList = "post_id, is_approved")\n       })\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@EntityListeners(AuditingEntityListener.class)\npublic class Comment {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "post_id", nullable = false)\n    private Post post;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "author_id", nullable = false)\n    private User author;\n    \n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = "parent_id")\n    private Comment parent;\n    \n    @Column(columnDefinition = "TEXT", nullable = false)\n    private String content;\n    \n    @Column(name = "is_approved", nullable = false)\n    @Builder.Default\n    private Boolean isApproved = false;\n    \n    @CreatedDate\n    @Column(name = "created_at", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n    \n    @LastModifiedDate\n    @Column(name = "updated_at")\n    private LocalDateTime updatedAt;\n    \n    // Self-referencing relationship for replies\n    @OneToMany(mappedBy = "parent", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    @Builder.Default\n    private List<Comment> replies = new ArrayList<>();\n    \n    @Override\n    public String toString() {\n        return String.format("Comment by %s on %s", \n                author != null ? author.getUsername() : "Unknown",\n                post != null ? post.getTitle() : "Unknown Post");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"repository-layer-spring-data-jpa",children:"Repository Layer (Spring Data JPA)"}),"\n",(0,i.jsx)(n.h3,{id:"django-orm-vs-spring-data-repositories",children:"Django ORM vs Spring Data Repositories"}),"\n",(0,i.jsx)(n.h4,{id:"django-queryset-operations",children:"Django QuerySet Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Django ORM queries\nfrom django.db.models import Q, F, Count, Avg\nfrom .models import User, Post, Comment\n\n# Basic queries\nusers = User.objects.all()\nactive_users = User.objects.filter(is_active=True)\nuser = User.objects.get(email='user@example.com')\n\n# Complex queries\npublished_posts = Post.objects.filter(\n    status='published',\n    published_at__lte=timezone.now()\n).select_related('author', 'category').prefetch_related('tags')\n\n# Aggregation\npost_stats = Post.objects.aggregate(\n    total_posts=Count('id'),\n    avg_views=Avg('view_count'),\n    total_views=Sum('view_count')\n)\n\n# Complex filtering\npopular_posts = Post.objects.filter(\n    Q(view_count__gt=1000) | Q(like_count__gt=100),\n    status='published'\n).annotate(\n    comment_count=Count('comments')\n).order_by('-view_count')\n\n# Custom queries\nrecent_posts_by_category = Post.objects.raw('''\n    SELECT p.*, COUNT(c.id) as comment_count\n    FROM posts p\n    LEFT JOIN comments c ON p.id = c.post_id\n    WHERE p.created_at >= %s\n    GROUP BY p.id\n    ORDER BY p.created_at DESC\n''', [one_week_ago])\n"})}),"\n",(0,i.jsx)(n.h4,{id:"spring-data-jpa-repositories",children:"Spring Data JPA Repositories"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// user/repository/UserRepository.java\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    \n    // Query methods (Spring Data generates implementation)\n    Optional<User> findByEmail(String email);\n    Optional<User> findByUsername(String username);\n    List<User> findByIsActiveTrue();\n    List<User> findByIsActiveTrueOrderByCreatedAtDesc();\n    \n    // Custom query with @Query annotation\n    @Query("SELECT u FROM User u WHERE u.username LIKE %:query% OR u.email LIKE %:query%")\n    List<User> searchUsers(@Param("query") String query);\n    \n    @Query("SELECT u FROM User u LEFT JOIN FETCH u.posts WHERE u.id = :id")\n    Optional<User> findByIdWithPosts(@Param("id") Long id);\n    \n    // Native SQL query\n    @Query(value = "SELECT * FROM custom_users WHERE created_at >= :date", nativeQuery = true)\n    List<User> findUsersCreatedAfter(@Param("date") LocalDateTime date);\n    \n    // Custom method with Specification\n    @Query("SELECT u FROM User u WHERE " +\n           "(:isActive is null OR u.isActive = :isActive) AND " +\n           "(:query is null OR u.username LIKE %:query% OR u.email LIKE %:query%)")\n    Page<User> findUsersWithFilters(@Param("isActive") Boolean isActive,\n                                   @Param("query") String query,\n                                   Pageable pageable);\n    \n    // Modifying queries\n    @Modifying\n    @Query("UPDATE User u SET u.isVerified = true WHERE u.id = :id")\n    int verifyUser(@Param("id") Long id);\n    \n    @Modifying\n    @Query("DELETE FROM User u WHERE u.isActive = false AND u.createdAt < :date")\n    int deleteInactiveUsersBefore(@Param("date") LocalDateTime date);\n}\n\n// blog/repository/PostRepository.java\n@Repository\npublic interface PostRepository extends JpaRepository<Post, Long>, JpaSpecificationExecutor<Post> {\n    \n    // Basic queries\n    List<Post> findByStatus(Post.Status status);\n    List<Post> findByAuthor(User author);\n    List<Post> findByCategory(Category category);\n    \n    // Complex queries with relationships\n    @Query("SELECT p FROM Post p " +\n           "JOIN FETCH p.author " +\n           "LEFT JOIN FETCH p.category " +\n           "LEFT JOIN FETCH p.tags " +\n           "WHERE p.status = :status " +\n           "ORDER BY p.createdAt DESC")\n    List<Post> findPublishedPostsWithDetails(@Param("status") Post.Status status);\n    \n    // Aggregation queries\n    @Query("SELECT p FROM Post p WHERE p.viewCount > :minViews OR p.likeCount > :minLikes")\n    List<Post> findPopularPosts(@Param("minViews") Integer minViews, \n                               @Param("minLikes") Integer minLikes);\n    \n    @Query("SELECT COUNT(p) FROM Post p WHERE p.author = :author AND p.status = :status")\n    long countPostsByAuthorAndStatus(@Param("author") User author, @Param("status") Post.Status status);\n    \n    // Pagination and sorting\n    Page<Post> findByStatusOrderByCreatedAtDesc(Post.Status status, Pageable pageable);\n    \n    @Query("SELECT p FROM Post p WHERE " +\n           "(:status is null OR p.status = :status) AND " +\n           "(:categoryId is null OR p.category.id = :categoryId) AND " +\n           "(:authorId is null OR p.author.id = :authorId) AND " +\n           "(:query is null OR LOWER(p.title) LIKE LOWER(CONCAT(\'%\', :query, \'%\')) OR " +\n           "LOWER(p.content) LIKE LOWER(CONCAT(\'%\', :query, \'%\')))")\n    Page<Post> findPostsWithFilters(@Param("status") Post.Status status,\n                                   @Param("categoryId") Long categoryId,\n                                   @Param("authorId") Long authorId,\n                                   @Param("query") String query,\n                                   Pageable pageable);\n    \n    // Custom native query for complex operations\n    @Query(value = """\n        SELECT p.*, COUNT(c.id) as comment_count\n        FROM posts p\n        LEFT JOIN comments c ON p.id = c.post_id AND c.is_approved = true\n        WHERE p.created_at >= :date\n        GROUP BY p.id\n        ORDER BY p.created_at DESC\n        """, nativeQuery = true)\n    List<Object[]> findRecentPostsWithCommentCount(@Param("date") LocalDateTime date);\n    \n    // Update operations\n    @Modifying\n    @Query("UPDATE Post p SET p.viewCount = p.viewCount + 1 WHERE p.id = :id")\n    int incrementViewCount(@Param("id") Long id);\n    \n    @Modifying\n    @Query("UPDATE Post p SET p.status = :newStatus WHERE p.author.id = :authorId AND p.status = :oldStatus")\n    int updatePostStatusByAuthor(@Param("authorId") Long authorId, \n                                @Param("oldStatus") Post.Status oldStatus,\n                                @Param("newStatus") Post.Status newStatus);\n}\n\n// blog/repository/CommentRepository.java\n@Repository\npublic interface CommentRepository extends JpaRepository<Comment, Long> {\n    \n    List<Comment> findByPostAndIsApprovedTrueOrderByCreatedAt(Post post);\n    List<Comment> findByAuthor(User author);\n    List<Comment> findByParentIsNullAndPost(Post post);\n    \n    @Query("SELECT c FROM Comment c WHERE c.post.id = :postId AND c.isApproved = true AND c.parent IS NULL")\n    List<Comment> findTopLevelCommentsByPostId(@Param("postId") Long postId);\n    \n    @Query("SELECT COUNT(c) FROM Comment c WHERE c.post = :post AND c.isApproved = true")\n    long countApprovedCommentsByPost(@Param("post") Post post);\n    \n    @Modifying\n    @Query("UPDATE Comment c SET c.isApproved = true WHERE c.id IN :ids")\n    int approveComments(@Param("ids") List<Long> ids);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-query-techniques",children:"Advanced Query Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"django-complex-queries",children:"Django Complex Queries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Complex Django queries\nfrom django.db.models import Q, F, Count, Case, When, IntegerField\n\n# Conditional annotations\nposts_with_metrics = Post.objects.annotate(\n    comment_count=Count('comments'),\n    popularity_score=Case(\n        When(view_count__gt=1000, then=F('view_count') * 2),\n        When(view_count__gt=500, then=F('view_count') * 1.5),\n        default=F('view_count'),\n        output_field=IntegerField()\n    )\n).filter(status='published')\n\n# Subqueries\nfrom django.db.models import OuterRef, Subquery\n\nlatest_comment_date = Comment.objects.filter(\n    post=OuterRef('pk')\n).order_by('-created_at').values('created_at')[:1]\n\nposts_with_latest_comment = Post.objects.annotate(\n    latest_comment_date=Subquery(latest_comment_date)\n).filter(status='published')\n\n# Custom managers\nclass PublishedPostManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().filter(\n            status='published',\n            published_at__lte=timezone.now()\n        )\n\nclass Post(models.Model):\n    # ... fields ...\n    \n    objects = models.Manager()  # Default manager\n    published = PublishedPostManager()  # Custom manager\n"})}),"\n",(0,i.jsx)(n.h3,{id:"spring-data-jpa-advanced-queries",children:"Spring Data JPA Advanced Queries"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Custom repository implementation\n@Repository\npublic class PostRepositoryImpl {\n    \n    @PersistenceContext\n    private EntityManager entityManager;\n    \n    public List<PostWithMetrics> findPostsWithMetrics(PostSearchCriteria criteria) {\n        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n        CriteriaQuery<PostWithMetrics> query = cb.createQuery(PostWithMetrics.class);\n        Root<Post> post = query.from(Post.class);\n        \n        // Join with comments for count\n        Join<Post, Comment> comments = post.join("comments", JoinType.LEFT);\n        \n        // Selection with computed fields\n        query.select(cb.construct(\n            PostWithMetrics.class,\n            post.get("id"),\n            post.get("title"),\n            post.get("viewCount"),\n            cb.count(comments),\n            cb.selectCase()\n                .when(cb.gt(post.get("viewCount"), 1000), cb.prod(post.get("viewCount"), 2))\n                .when(cb.gt(post.get("viewCount"), 500), cb.prod(post.get("viewCount"), 1.5))\n                .otherwise(post.get("viewCount"))\n        ));\n        \n        // Conditions\n        Predicate predicate = cb.conjunction();\n        \n        if (criteria.getStatus() != null) {\n            predicate = cb.and(predicate, cb.equal(post.get("status"), criteria.getStatus()));\n        }\n        \n        if (criteria.getAuthorId() != null) {\n            predicate = cb.and(predicate, cb.equal(post.get("author").get("id"), criteria.getAuthorId()));\n        }\n        \n        if (criteria.getMinViews() != null) {\n            predicate = cb.and(predicate, cb.ge(post.get("viewCount"), criteria.getMinViews()));\n        }\n        \n        query.where(predicate);\n        query.groupBy(post.get("id"));\n        query.orderBy(cb.desc(post.get("createdAt")));\n        \n        return entityManager.createQuery(query).getResultList();\n    }\n    \n    // Subquery example\n    public List<Post> findPostsWithRecentComments(LocalDateTime since) {\n        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n        CriteriaQuery<Post> query = cb.createQuery(Post.class);\n        Root<Post> post = query.from(Post.class);\n        \n        // Subquery for latest comment date\n        Subquery<LocalDateTime> subquery = query.subquery(LocalDateTime.class);\n        Root<Comment> comment = subquery.from(Comment.class);\n        subquery.select(cb.greatest(comment.get("createdAt")))\n               .where(cb.equal(comment.get("post"), post));\n        \n        query.select(post)\n             .where(cb.greaterThan(subquery, since))\n             .orderBy(cb.desc(post.get("createdAt")));\n        \n        return entityManager.createQuery(query).getResultList();\n    }\n}\n\n// Specifications for dynamic queries\npublic class PostSpecifications {\n    \n    public static Specification<Post> hasStatus(Post.Status status) {\n        return (root, query, criteriaBuilder) ->\n            status == null ? null : criteriaBuilder.equal(root.get("status"), status);\n    }\n    \n    public static Specification<Post> hasAuthor(Long authorId) {\n        return (root, query, criteriaBuilder) ->\n            authorId == null ? null : criteriaBuilder.equal(root.get("author").get("id"), authorId);\n    }\n    \n    public static Specification<Post> hasCategory(Long categoryId) {\n        return (root, query, criteriaBuilder) ->\n            categoryId == null ? null : criteriaBuilder.equal(root.get("category").get("id"), categoryId);\n    }\n    \n    public static Specification<Post> titleOrContentContains(String searchText) {\n        return (root, query, criteriaBuilder) -> {\n            if (searchText == null || searchText.trim().isEmpty()) {\n                return null;\n            }\n            String pattern = "%" + searchText.toLowerCase() + "%";\n            return criteriaBuilder.or(\n                criteriaBuilder.like(criteriaBuilder.lower(root.get("title")), pattern),\n                criteriaBuilder.like(criteriaBuilder.lower(root.get("content")), pattern)\n            );\n        };\n    }\n    \n    public static Specification<Post> createdAfter(LocalDateTime date) {\n        return (root, query, criteriaBuilder) ->\n            date == null ? null : criteriaBuilder.greaterThan(root.get("createdAt"), date);\n    }\n    \n    public static Specification<Post> withMinimumViews(Integer minViews) {\n        return (root, query, criteriaBuilder) ->\n            minViews == null ? null : criteriaBuilder.ge(root.get("viewCount"), minViews);\n    }\n}\n\n// Usage in service\n@Service\npublic class PostService {\n    \n    private final PostRepository postRepository;\n    \n    public Page<Post> searchPosts(PostSearchCriteria criteria, Pageable pageable) {\n        Specification<Post> spec = Specification.where(PostSpecifications.hasStatus(criteria.getStatus()))\n                .and(PostSpecifications.hasAuthor(criteria.getAuthorId()))\n                .and(PostSpecifications.hasCategory(criteria.getCategoryId()))\n                .and(PostSpecifications.titleOrContentContains(criteria.getSearchText()))\n                .and(PostSpecifications.createdAfter(criteria.getCreatedAfter()))\n                .and(PostSpecifications.withMinimumViews(criteria.getMinViews()));\n        \n        return postRepository.findAll(spec, pageable);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"entity-lifecycle-and-auditing",children:"Entity Lifecycle and Auditing"}),"\n",(0,i.jsx)(n.h3,{id:"django-model-lifecycle",children:"Django Model Lifecycle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Django signals for model lifecycle\nfrom django.db.models.signals import pre_save, post_save, pre_delete, post_delete\nfrom django.dispatch import receiver\nfrom django.utils.text import slugify\n\n@receiver(pre_save, sender=Post)\ndef generate_slug(sender, instance, **kwargs):\n    if not instance.slug:\n        instance.slug = slugify(instance.title)\n\n@receiver(post_save, sender=Post)\ndef update_author_post_count(sender, instance, created, **kwargs):\n    if created:\n        # Update author\'s post count cache\n        cache.delete(f"user_post_count_{instance.author.id}")\n\n@receiver(pre_delete, sender=Post)\ndef cleanup_related_data(sender, instance, **kwargs):\n    # Clean up related files, cache, etc.\n    instance.tags.clear()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-entity-lifecycle",children:"Spring Boot Entity Lifecycle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// JPA Entity Listeners\n@EntityListeners(AuditingEntityListener.class)\n@Entity\npublic class Post {\n    // ... fields ...\n    \n    @PrePersist\n    protected void onCreate() {\n        if (slug == null || slug.trim().isEmpty()) {\n            slug = generateSlug(title);\n        }\n    }\n    \n    @PreUpdate\n    protected void onUpdate() {\n        // Any pre-update logic\n    }\n    \n    @PostPersist\n    protected void afterCreate() {\n        // Post-creation logic\n        log.info("Post created: {}", title);\n    }\n    \n    @PostUpdate\n    protected void afterUpdate() {\n        // Post-update logic\n    }\n    \n    @PreRemove\n    protected void beforeDelete() {\n        // Pre-deletion cleanup\n        tags.clear();\n    }\n    \n    private String generateSlug(String title) {\n        return title.toLowerCase()\n                   .replaceAll("[^a-z0-9\\\\s]", "")\n                   .replaceAll("\\\\s+", "-")\n                   .trim();\n    }\n}\n\n// Global entity listener\n@Component\npublic class PostEntityListener {\n    \n    @Autowired\n    private CacheManager cacheManager;\n    \n    @PostPersist\n    @PostUpdate\n    @PostRemove\n    public void invalidateCache(Post post) {\n        Cache cache = cacheManager.getCache("posts");\n        if (cache != null) {\n            cache.evict("user_posts_" + post.getAuthor().getId());\n            cache.evict("category_posts_" + (post.getCategory() != null ? post.getCategory().getId() : "null"));\n        }\n    }\n}\n\n// Auditing configuration\n@Configuration\n@EnableJpaAuditing\npublic class AuditingConfig {\n    \n    @Bean\n    public AuditorAware<String> auditorProvider() {\n        return () -> {\n            // Get current user from security context\n            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n            if (authentication == null || !authentication.isAuthenticated()) {\n                return Optional.of("system");\n            }\n            return Optional.of(authentication.getName());\n        };\n    }\n}\n\n// Auditable base entity\n@MappedSuperclass\n@EntityListeners(AuditingEntityListener.class)\n@Data\npublic abstract class AuditableEntity {\n    \n    @CreatedDate\n    @Column(name = "created_at", nullable = false, updatable = false)\n    private LocalDateTime createdAt;\n    \n    @LastModifiedDate\n    @Column(name = "updated_at")\n    private LocalDateTime updatedAt;\n    \n    @CreatedBy\n    @Column(name = "created_by", updatable = false)\n    private String createdBy;\n    \n    @LastModifiedBy\n    @Column(name = "updated_by")\n    private String updatedBy;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(n.h3,{id:"django-query-optimization",children:"Django Query Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Django optimization techniques\nfrom django.db.models import Prefetch\n\n# Select related for foreign keys\nposts = Post.objects.select_related('author', 'category').all()\n\n# Prefetch related for many-to-many and reverse foreign keys\nposts = Post.objects.prefetch_related('tags', 'comments__author').all()\n\n# Custom prefetch\napproved_comments = Comment.objects.filter(is_approved=True)\nposts = Post.objects.prefetch_related(\n    Prefetch('comments', queryset=approved_comments, to_attr='approved_comments')\n).all()\n\n# Only/defer for field selection\nposts = Post.objects.only('id', 'title', 'created_at').all()\nposts = Post.objects.defer('content').all()\n\n# Database functions\nfrom django.db.models import F, Value\nfrom django.db.models.functions import Concat\n\nposts = Post.objects.annotate(\n    full_title=Concat('title', Value(' - '), 'category__name')\n).all()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-jpa-optimization",children:"Spring Boot JPA Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// JPA optimization techniques\n\n// Entity graphs for fetch optimization\n@NamedEntityGraph(\n    name = "Post.withAuthorAndCategory",\n    attributeNodes = {\n        @NamedAttributeNode("author"),\n        @NamedAttributeNode("category"),\n        @NamedAttributeNode(value = "tags")\n    }\n)\n@Entity\npublic class Post {\n    // ... entity definition\n}\n\n// Repository with entity graph\n@Repository\npublic interface PostRepository extends JpaRepository<Post, Long> {\n    \n    @EntityGraph("Post.withAuthorAndCategory")\n    @Query("SELECT p FROM Post p WHERE p.status = :status")\n    List<Post> findPostsWithDetails(@Param("status") Post.Status status);\n    \n    // Projection for limited fields\n    @Query("SELECT p.id, p.title, p.createdAt FROM Post p WHERE p.status = :status")\n    List<PostSummary> findPostSummaries(@Param("status") Post.Status status);\n}\n\n// Projection interface\npublic interface PostSummary {\n    Long getId();\n    String getTitle();\n    LocalDateTime getCreatedAt();\n}\n\n// Batch operations\n@Repository\npublic class PostRepositoryImpl {\n    \n    @PersistenceContext\n    private EntityManager entityManager;\n    \n    @Transactional\n    public void batchUpdateViewCounts(List<Long> postIds, int increment) {\n        String jpql = "UPDATE Post p SET p.viewCount = p.viewCount + :increment WHERE p.id IN :ids";\n        entityManager.createQuery(jpql)\n                     .setParameter("increment", increment)\n                     .setParameter("ids", postIds)\n                     .executeUpdate();\n    }\n    \n    @Transactional\n    public void batchInsertPosts(List<Post> posts) {\n        int batchSize = 20;\n        for (int i = 0; i < posts.size(); i++) {\n            entityManager.persist(posts.get(i));\n            if (i % batchSize == 0 && i > 0) {\n                entityManager.flush();\n                entityManager.clear();\n            }\n        }\n    }\n}\n\n// Caching\n@Entity\n@Cacheable\n@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\npublic class Category {\n    // ... entity definition\n}\n\n// Query result caching\n@Repository\npublic interface CategoryRepository extends JpaRepository<Category, Long> {\n    \n    @QueryHints(@QueryHint(name = "org.hibernate.cacheable", value = "true"))\n    @Query("SELECT c FROM Category c WHERE c.isActive = true ORDER BY c.name")\n    List<Category> findActiveCategories();\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"migration-summary",children:"Migration Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Django"}),(0,i.jsx)(n.th,{children:"Spring Boot JPA"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Model Definition"})}),(0,i.jsx)(n.td,{children:"Python classes"}),(0,i.jsx)(n.td,{children:"Java classes with annotations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Fields"})}),(0,i.jsx)(n.td,{children:"Model fields"}),(0,i.jsx)(n.td,{children:"Entity attributes with annotations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Relationships"})}),(0,i.jsx)(n.td,{children:"ForeignKey, ManyToMany"}),(0,i.jsx)(n.td,{children:"@OneToMany, @ManyToMany, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Validation"})}),(0,i.jsx)(n.td,{children:"Model validators"}),(0,i.jsx)(n.td,{children:"Bean Validation annotations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Queries"})}),(0,i.jsx)(n.td,{children:"QuerySet methods"}),(0,i.jsx)(n.td,{children:"Repository methods + JPQL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Raw SQL"})}),(0,i.jsx)(n.td,{children:".raw() method"}),(0,i.jsx)(n.td,{children:"@Query with nativeQuery = true"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Aggregation"})}),(0,i.jsx)(n.td,{children:".aggregate()"}),(0,i.jsx)(n.td,{children:"@Query with aggregate functions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Caching"})}),(0,i.jsx)(n.td,{children:"Django cache framework"}),(0,i.jsx)(n.td,{children:"Hibernate 2nd level cache"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Lifecycle"})}),(0,i.jsx)(n.td,{children:"Django signals"}),(0,i.jsx)(n.td,{children:"JPA lifecycle callbacks"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Migration"})}),(0,i.jsx)(n.td,{children:"Django migrations"}),(0,i.jsx)(n.td,{children:"Flyway/Liquibase"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"The key transition is moving from Django's QuerySet-based ORM to JPA's repository pattern with explicit relationship mapping and type-safe queries."})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);